package com.example.jna;
import com.example.jna.curl_httppost.ByReference;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.NativeSizeByReference;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>libcurl-4</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Libcurl4Library extends Library {
	public static final String JNA_LIBRARY_NAME = "libcurl-4";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Libcurl4Library.JNA_LIBRARY_NAME);
	public static final Libcurl4Library INSTANCE = (Libcurl4Library)Native.loadLibrary(Libcurl4Library.JNA_LIBRARY_NAME, Libcurl4Library.class);
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_sslbackend {
		/** <i>native declaration : include\curl\curl.h:78</i> */
		public static final int CURLSSLBACKEND_NONE = 0;
		/** <i>native declaration : include\curl\curl.h:79</i> */
		public static final int CURLSSLBACKEND_OPENSSL = 1;
		/** <i>native declaration : include\curl\curl.h:80</i> */
		public static final int CURLSSLBACKEND_GNUTLS = 2;
		/** <i>native declaration : include\curl\curl.h:81</i> */
		public static final int CURLSSLBACKEND_NSS = 3;
		/**
		 * Was QSOSSL.<br>
		 * <i>native declaration : include\curl\curl.h:82</i>
		 */
		public static final int CURLSSLBACKEND_OBSOLETE4 = 4;
		/** <i>native declaration : include\curl\curl.h:83</i> */
		public static final int CURLSSLBACKEND_GSKIT = 5;
		/** <i>native declaration : include\curl\curl.h:84</i> */
		public static final int CURLSSLBACKEND_POLARSSL = 6;
		/** <i>native declaration : include\curl\curl.h:85</i> */
		public static final int CURLSSLBACKEND_WOLFSSL = 7;
		/** <i>native declaration : include\curl\curl.h:86</i> */
		public static final int CURLSSLBACKEND_SCHANNEL = 8;
		/** <i>native declaration : include\curl\curl.h:87</i> */
		public static final int CURLSSLBACKEND_SECURETRANSPORT = 9;
		/**
		 * never used since 7.63.0<br>
		 * <i>native declaration : include\curl\curl.h:88</i>
		 */
		public static final int CURLSSLBACKEND_AXTLS = 10;
		/** <i>native declaration : include\curl\curl.h:89</i> */
		public static final int CURLSSLBACKEND_MBEDTLS = 11;
		/** <i>native declaration : include\curl\curl.h:90</i> */
		public static final int CURLSSLBACKEND_MESALINK = 12;
		/** <i>native declaration : include\curl\curl.h:91</i> */
		public static final int CURLSSLBACKEND_BEARSSL = 13;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curlfiletype {
		/** <i>native declaration : include\curl\curl.h:205</i> */
		public static final int CURLFILETYPE_FILE = 0;
		/** <i>native declaration : include\curl\curl.h:206</i> */
		public static final int CURLFILETYPE_DIRECTORY = 1;
		/** <i>native declaration : include\curl\curl.h:207</i> */
		public static final int CURLFILETYPE_SYMLINK = 2;
		/** <i>native declaration : include\curl\curl.h:208</i> */
		public static final int CURLFILETYPE_DEVICE_BLOCK = 3;
		/** <i>native declaration : include\curl\curl.h:209</i> */
		public static final int CURLFILETYPE_DEVICE_CHAR = 4;
		/** <i>native declaration : include\curl\curl.h:210</i> */
		public static final int CURLFILETYPE_NAMEDPIPE = 5;
		/** <i>native declaration : include\curl\curl.h:211</i> */
		public static final int CURLFILETYPE_SOCKET = 6;
		/**
		 * is possible only on Sun Solaris now<br>
		 * <i>native declaration : include\curl\curl.h:212</i>
		 */
		public static final int CURLFILETYPE_DOOR = 7;
		/**
		 * should never occur<br>
		 * <i>native declaration : include\curl\curl.h:214</i>
		 */
		public static final int CURLFILETYPE_UNKNOWN = 8;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curlsocktype {
		/**
		 * socket created for a specific IP connection<br>
		 * <i>native declaration : include\curl\curl.h:320</i>
		 */
		public static final int CURLSOCKTYPE_IPCXN = 0;
		/**
		 * socket created by accept() call<br>
		 * <i>native declaration : include\curl\curl.h:321</i>
		 */
		public static final int CURLSOCKTYPE_ACCEPT = 1;
		/**
		 * never use<br>
		 * <i>native declaration : include\curl\curl.h:322</i>
		 */
		public static final int CURLSOCKTYPE_LAST = 2;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curlioerr {
		/**
		 * I/O operation successful<br>
		 * <i>native declaration : include\curl\curl.h:354</i>
		 */
		public static final int CURLIOE_OK = 0;
		/**
		 * command was unknown to callback<br>
		 * <i>native declaration : include\curl\curl.h:355</i>
		 */
		public static final int CURLIOE_UNKNOWNCMD = 1;
		/**
		 * failed to restart the read<br>
		 * <i>native declaration : include\curl\curl.h:356</i>
		 */
		public static final int CURLIOE_FAILRESTART = 2;
		/**
		 * never use<br>
		 * <i>native declaration : include\curl\curl.h:357</i>
		 */
		public static final int CURLIOE_LAST = 3;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curliocmd {
		/**
		 * no operation<br>
		 * <i>native declaration : include\curl\curl.h:361</i>
		 */
		public static final int CURLIOCMD_NOP = 0;
		/**
		 * restart the read stream from start<br>
		 * <i>native declaration : include\curl\curl.h:362</i>
		 */
		public static final int CURLIOCMD_RESTARTREAD = 1;
		/**
		 * never use<br>
		 * <i>native declaration : include\curl\curl.h:363</i>
		 */
		public static final int CURLIOCMD_LAST = 2;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_infotype {
		/** <i>native declaration : include\curl\curl.h:388</i> */
		public static final int CURLINFO_TEXT = 0;
		/**
		 * 1<br>
		 * <i>native declaration : include\curl\curl.h:389</i>
		 */
		public static final int CURLINFO_HEADER_IN = 1;
		/**
		 * 2<br>
		 * <i>native declaration : include\curl\curl.h:390</i>
		 */
		public static final int CURLINFO_HEADER_OUT = 2;
		/**
		 * 3<br>
		 * <i>native declaration : include\curl\curl.h:391</i>
		 */
		public static final int CURLINFO_DATA_IN = 3;
		/**
		 * 4<br>
		 * <i>native declaration : include\curl\curl.h:392</i>
		 */
		public static final int CURLINFO_DATA_OUT = 4;
		/**
		 * 5<br>
		 * <i>native declaration : include\curl\curl.h:393</i>
		 */
		public static final int CURLINFO_SSL_DATA_IN = 5;
		/**
		 * 6<br>
		 * <i>native declaration : include\curl\curl.h:394</i>
		 */
		public static final int CURLINFO_SSL_DATA_OUT = 6;
		/** <i>native declaration : include\curl\curl.h:395</i> */
		public static final int CURLINFO_END = 7;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface CURLcode {
		/** <i>native declaration : include\curl\curl.h:413</i> */
		public static final int CURLE_OK = 0;
		/**
		 * 1<br>
		 * <i>native declaration : include\curl\curl.h:414</i>
		 */
		public static final int CURLE_UNSUPPORTED_PROTOCOL = 1;
		/**
		 * 2<br>
		 * <i>native declaration : include\curl\curl.h:415</i>
		 */
		public static final int CURLE_FAILED_INIT = 2;
		/**
		 * 3<br>
		 * <i>native declaration : include\curl\curl.h:416</i>
		 */
		public static final int CURLE_URL_MALFORMAT = 3;
		/**
		 * 4 - [was obsoleted in August 2007 for<br>
		 * 7.17.0, reused in April 2011 for 7.21.5]<br>
		 * <i>native declaration : include\curl\curl.h:417</i>
		 */
		public static final int CURLE_NOT_BUILT_IN = 4;
		/**
		 * 5<br>
		 * <i>native declaration : include\curl\curl.h:419</i>
		 */
		public static final int CURLE_COULDNT_RESOLVE_PROXY = 5;
		/**
		 * 6<br>
		 * <i>native declaration : include\curl\curl.h:420</i>
		 */
		public static final int CURLE_COULDNT_RESOLVE_HOST = 6;
		/**
		 * 7<br>
		 * <i>native declaration : include\curl\curl.h:421</i>
		 */
		public static final int CURLE_COULDNT_CONNECT = 7;
		/**
		 * 8<br>
		 * <i>native declaration : include\curl\curl.h:422</i>
		 */
		public static final int CURLE_WEIRD_SERVER_REPLY = 8;
		/**
		 * 9 a service was denied by the server<br>
		 * due to lack of access - when login fails<br>
		 * this is not returned.<br>
		 * <i>native declaration : include\curl\curl.h:423</i>
		 */
		public static final int CURLE_REMOTE_ACCESS_DENIED = 9;
		/**
		 * 10 - [was obsoleted in April 2006 for<br>
		 * 7.15.4, reused in Dec 2011 for 7.24.0]<br>
		 * <i>native declaration : include\curl\curl.h:426</i>
		 */
		public static final int CURLE_FTP_ACCEPT_FAILED = 10;
		/**
		 * 11<br>
		 * <i>native declaration : include\curl\curl.h:428</i>
		 */
		public static final int CURLE_FTP_WEIRD_PASS_REPLY = 11;
		/**
		 * 12 - timeout occurred accepting server<br>
		 * [was obsoleted in August 2007 for 7.17.0,<br>
		 * reused in Dec 2011 for 7.24.0]<br>
		 * <i>native declaration : include\curl\curl.h:429</i>
		 */
		public static final int CURLE_FTP_ACCEPT_TIMEOUT = 12;
		/**
		 * 13<br>
		 * <i>native declaration : include\curl\curl.h:432</i>
		 */
		public static final int CURLE_FTP_WEIRD_PASV_REPLY = 13;
		/**
		 * 14<br>
		 * <i>native declaration : include\curl\curl.h:433</i>
		 */
		public static final int CURLE_FTP_WEIRD_227_FORMAT = 14;
		/**
		 * 15<br>
		 * <i>native declaration : include\curl\curl.h:434</i>
		 */
		public static final int CURLE_FTP_CANT_GET_HOST = 15;
		/**
		 * 16 - A problem in the http2 framing layer.<br>
		 * [was obsoleted in August 2007 for 7.17.0,<br>
		 * reused in July 2014 for 7.38.0]<br>
		 * <i>native declaration : include\curl\curl.h:435</i>
		 */
		public static final int CURLE_HTTP2 = 16;
		/**
		 * 17<br>
		 * <i>native declaration : include\curl\curl.h:438</i>
		 */
		public static final int CURLE_FTP_COULDNT_SET_TYPE = 17;
		/**
		 * 18<br>
		 * <i>native declaration : include\curl\curl.h:439</i>
		 */
		public static final int CURLE_PARTIAL_FILE = 18;
		/**
		 * 19<br>
		 * <i>native declaration : include\curl\curl.h:440</i>
		 */
		public static final int CURLE_FTP_COULDNT_RETR_FILE = 19;
		/**
		 * 20 - NOT USED<br>
		 * <i>native declaration : include\curl\curl.h:441</i>
		 */
		public static final int CURLE_OBSOLETE20 = 20;
		/**
		 * 21 - quote command failure<br>
		 * <i>native declaration : include\curl\curl.h:442</i>
		 */
		public static final int CURLE_QUOTE_ERROR = 21;
		/**
		 * 22<br>
		 * <i>native declaration : include\curl\curl.h:443</i>
		 */
		public static final int CURLE_HTTP_RETURNED_ERROR = 22;
		/**
		 * 23<br>
		 * <i>native declaration : include\curl\curl.h:444</i>
		 */
		public static final int CURLE_WRITE_ERROR = 23;
		/**
		 * 24 - NOT USED<br>
		 * <i>native declaration : include\curl\curl.h:445</i>
		 */
		public static final int CURLE_OBSOLETE24 = 24;
		/**
		 * 25 - failed upload "command"<br>
		 * <i>native declaration : include\curl\curl.h:446</i>
		 */
		public static final int CURLE_UPLOAD_FAILED = 25;
		/**
		 * 26 - couldn't open/read from file<br>
		 * <i>native declaration : include\curl\curl.h:447</i>
		 */
		public static final int CURLE_READ_ERROR = 26;
		/**
		 * 27<br>
		 * <i>native declaration : include\curl\curl.h:448</i>
		 */
		public static final int CURLE_OUT_OF_MEMORY = 27;
		/**
		 * Note: CURLE_OUT_OF_MEMORY may sometimes indicate a conversion error<br>
		 * instead of a memory allocation error if CURL_DOES_CONVERSIONS<br>
		 * is defined<br>
		 * 28 - the timeout time was reached<br>
		 * <i>native declaration : include\curl\curl.h:453</i>
		 */
		public static final int CURLE_OPERATION_TIMEDOUT = 28;
		/**
		 * 29 - NOT USED<br>
		 * <i>native declaration : include\curl\curl.h:454</i>
		 */
		public static final int CURLE_OBSOLETE29 = 29;
		/**
		 * 30 - FTP PORT operation failed<br>
		 * <i>native declaration : include\curl\curl.h:455</i>
		 */
		public static final int CURLE_FTP_PORT_FAILED = 30;
		/**
		 * 31 - the REST command failed<br>
		 * <i>native declaration : include\curl\curl.h:456</i>
		 */
		public static final int CURLE_FTP_COULDNT_USE_REST = 31;
		/**
		 * 32 - NOT USED<br>
		 * <i>native declaration : include\curl\curl.h:457</i>
		 */
		public static final int CURLE_OBSOLETE32 = 32;
		/**
		 * 33 - RANGE "command" didn't work<br>
		 * <i>native declaration : include\curl\curl.h:458</i>
		 */
		public static final int CURLE_RANGE_ERROR = 33;
		/**
		 * 34<br>
		 * <i>native declaration : include\curl\curl.h:459</i>
		 */
		public static final int CURLE_HTTP_POST_ERROR = 34;
		/**
		 * 35 - wrong when connecting with SSL<br>
		 * <i>native declaration : include\curl\curl.h:460</i>
		 */
		public static final int CURLE_SSL_CONNECT_ERROR = 35;
		/**
		 * 36 - couldn't resume download<br>
		 * <i>native declaration : include\curl\curl.h:461</i>
		 */
		public static final int CURLE_BAD_DOWNLOAD_RESUME = 36;
		/**
		 * 37<br>
		 * <i>native declaration : include\curl\curl.h:462</i>
		 */
		public static final int CURLE_FILE_COULDNT_READ_FILE = 37;
		/**
		 * 38<br>
		 * <i>native declaration : include\curl\curl.h:463</i>
		 */
		public static final int CURLE_LDAP_CANNOT_BIND = 38;
		/**
		 * 39<br>
		 * <i>native declaration : include\curl\curl.h:464</i>
		 */
		public static final int CURLE_LDAP_SEARCH_FAILED = 39;
		/**
		 * 40 - NOT USED<br>
		 * <i>native declaration : include\curl\curl.h:465</i>
		 */
		public static final int CURLE_OBSOLETE40 = 40;
		/**
		 * 41 - NOT USED starting with 7.53.0<br>
		 * <i>native declaration : include\curl\curl.h:466</i>
		 */
		public static final int CURLE_FUNCTION_NOT_FOUND = 41;
		/**
		 * 42<br>
		 * <i>native declaration : include\curl\curl.h:467</i>
		 */
		public static final int CURLE_ABORTED_BY_CALLBACK = 42;
		/**
		 * 43<br>
		 * <i>native declaration : include\curl\curl.h:468</i>
		 */
		public static final int CURLE_BAD_FUNCTION_ARGUMENT = 43;
		/**
		 * 44 - NOT USED<br>
		 * <i>native declaration : include\curl\curl.h:469</i>
		 */
		public static final int CURLE_OBSOLETE44 = 44;
		/**
		 * 45 - CURLOPT_INTERFACE failed<br>
		 * <i>native declaration : include\curl\curl.h:470</i>
		 */
		public static final int CURLE_INTERFACE_FAILED = 45;
		/**
		 * 46 - NOT USED<br>
		 * <i>native declaration : include\curl\curl.h:471</i>
		 */
		public static final int CURLE_OBSOLETE46 = 46;
		/**
		 * 47 - catch endless re-direct loops<br>
		 * <i>native declaration : include\curl\curl.h:472</i>
		 */
		public static final int CURLE_TOO_MANY_REDIRECTS = 47;
		/**
		 * 48 - User specified an unknown option<br>
		 * <i>native declaration : include\curl\curl.h:473</i>
		 */
		public static final int CURLE_UNKNOWN_OPTION = 48;
		/**
		 * 49 - Malformed telnet option<br>
		 * <i>native declaration : include\curl\curl.h:474</i>
		 */
		public static final int CURLE_TELNET_OPTION_SYNTAX = 49;
		/**
		 * 50 - NOT USED<br>
		 * <i>native declaration : include\curl\curl.h:475</i>
		 */
		public static final int CURLE_OBSOLETE50 = 50;
		/**
		 * 51 - NOT USED<br>
		 * <i>native declaration : include\curl\curl.h:476</i>
		 */
		public static final int CURLE_OBSOLETE51 = 51;
		/**
		 * 52 - when this is a specific error<br>
		 * <i>native declaration : include\curl\curl.h:477</i>
		 */
		public static final int CURLE_GOT_NOTHING = 52;
		/**
		 * 53 - SSL crypto engine not found<br>
		 * <i>native declaration : include\curl\curl.h:478</i>
		 */
		public static final int CURLE_SSL_ENGINE_NOTFOUND = 53;
		/**
		 * 54 - can not set SSL crypto engine as<br>
		 * default<br>
		 * <i>native declaration : include\curl\curl.h:479</i>
		 */
		public static final int CURLE_SSL_ENGINE_SETFAILED = 54;
		/**
		 * 55 - failed sending network data<br>
		 * <i>native declaration : include\curl\curl.h:481</i>
		 */
		public static final int CURLE_SEND_ERROR = 55;
		/**
		 * 56 - failure in receiving network data<br>
		 * <i>native declaration : include\curl\curl.h:482</i>
		 */
		public static final int CURLE_RECV_ERROR = 56;
		/**
		 * 57 - NOT IN USE<br>
		 * <i>native declaration : include\curl\curl.h:483</i>
		 */
		public static final int CURLE_OBSOLETE57 = 57;
		/**
		 * 58 - problem with the local certificate<br>
		 * <i>native declaration : include\curl\curl.h:484</i>
		 */
		public static final int CURLE_SSL_CERTPROBLEM = 58;
		/**
		 * 59 - couldn't use specified cipher<br>
		 * <i>native declaration : include\curl\curl.h:485</i>
		 */
		public static final int CURLE_SSL_CIPHER = 59;
		/**
		 * 60 - peer's certificate or fingerprint<br>
		 * wasn't verified fine<br>
		 * <i>native declaration : include\curl\curl.h:486</i>
		 */
		public static final int CURLE_PEER_FAILED_VERIFICATION = 60;
		/**
		 * 61 - Unrecognized/bad encoding<br>
		 * <i>native declaration : include\curl\curl.h:488</i>
		 */
		public static final int CURLE_BAD_CONTENT_ENCODING = 61;
		/**
		 * 62 - Invalid LDAP URL<br>
		 * <i>native declaration : include\curl\curl.h:489</i>
		 */
		public static final int CURLE_LDAP_INVALID_URL = 62;
		/**
		 * 63 - Maximum file size exceeded<br>
		 * <i>native declaration : include\curl\curl.h:490</i>
		 */
		public static final int CURLE_FILESIZE_EXCEEDED = 63;
		/**
		 * 64 - Requested FTP SSL level failed<br>
		 * <i>native declaration : include\curl\curl.h:491</i>
		 */
		public static final int CURLE_USE_SSL_FAILED = 64;
		/**
		 * 65 - Sending the data requires a rewind<br>
		 * that failed<br>
		 * <i>native declaration : include\curl\curl.h:492</i>
		 */
		public static final int CURLE_SEND_FAIL_REWIND = 65;
		/**
		 * 66 - failed to initialise ENGINE<br>
		 * <i>native declaration : include\curl\curl.h:494</i>
		 */
		public static final int CURLE_SSL_ENGINE_INITFAILED = 66;
		/**
		 * 67 - user, password or similar was not<br>
		 * accepted and we failed to login<br>
		 * <i>native declaration : include\curl\curl.h:495</i>
		 */
		public static final int CURLE_LOGIN_DENIED = 67;
		/**
		 * 68 - file not found on server<br>
		 * <i>native declaration : include\curl\curl.h:497</i>
		 */
		public static final int CURLE_TFTP_NOTFOUND = 68;
		/**
		 * 69 - permission problem on server<br>
		 * <i>native declaration : include\curl\curl.h:498</i>
		 */
		public static final int CURLE_TFTP_PERM = 69;
		/**
		 * 70 - out of disk space on server<br>
		 * <i>native declaration : include\curl\curl.h:499</i>
		 */
		public static final int CURLE_REMOTE_DISK_FULL = 70;
		/**
		 * 71 - Illegal TFTP operation<br>
		 * <i>native declaration : include\curl\curl.h:500</i>
		 */
		public static final int CURLE_TFTP_ILLEGAL = 71;
		/**
		 * 72 - Unknown transfer ID<br>
		 * <i>native declaration : include\curl\curl.h:501</i>
		 */
		public static final int CURLE_TFTP_UNKNOWNID = 72;
		/**
		 * 73 - File already exists<br>
		 * <i>native declaration : include\curl\curl.h:502</i>
		 */
		public static final int CURLE_REMOTE_FILE_EXISTS = 73;
		/**
		 * 74 - No such user<br>
		 * <i>native declaration : include\curl\curl.h:503</i>
		 */
		public static final int CURLE_TFTP_NOSUCHUSER = 74;
		/**
		 * 75 - conversion failed<br>
		 * <i>native declaration : include\curl\curl.h:504</i>
		 */
		public static final int CURLE_CONV_FAILED = 75;
		/**
		 * 76 - caller must register conversion<br>
		 * callbacks using curl_easy_setopt options<br>
		 * CURLOPT_CONV_FROM_NETWORK_FUNCTION,<br>
		 * CURLOPT_CONV_TO_NETWORK_FUNCTION, and<br>
		 * CURLOPT_CONV_FROM_UTF8_FUNCTION<br>
		 * <i>native declaration : include\curl\curl.h:505</i>
		 */
		public static final int CURLE_CONV_REQD = 76;
		/**
		 * 77 - could not load CACERT file, missing<br>
		 * or wrong format<br>
		 * <i>native declaration : include\curl\curl.h:510</i>
		 */
		public static final int CURLE_SSL_CACERT_BADFILE = 77;
		/**
		 * 78 - remote file not found<br>
		 * <i>native declaration : include\curl\curl.h:512</i>
		 */
		public static final int CURLE_REMOTE_FILE_NOT_FOUND = 78;
		/**
		 * 79 - error from the SSH layer, somewhat<br>
		 * generic so the error message will be of<br>
		 * interest when this has happened<br>
		 * <i>native declaration : include\curl\curl.h:513</i>
		 */
		public static final int CURLE_SSH = 79;
		/**
		 * 80 - Failed to shut down the SSL<br>
		 * connection<br>
		 * <i>native declaration : include\curl\curl.h:517</i>
		 */
		public static final int CURLE_SSL_SHUTDOWN_FAILED = 80;
		/**
		 * 81 - socket is not ready for send/recv,<br>
		 * wait till it's ready and try again (Added<br>
		 * in 7.18.2)<br>
		 * <i>native declaration : include\curl\curl.h:519</i>
		 */
		public static final int CURLE_AGAIN = 81;
		/**
		 * 82 - could not load CRL file, missing or<br>
		 * wrong format (Added in 7.19.0)<br>
		 * <i>native declaration : include\curl\curl.h:522</i>
		 */
		public static final int CURLE_SSL_CRL_BADFILE = 82;
		/**
		 * 83 - Issuer check failed.  (Added in<br>
		 * 7.19.0)<br>
		 * <i>native declaration : include\curl\curl.h:524</i>
		 */
		public static final int CURLE_SSL_ISSUER_ERROR = 83;
		/**
		 * 84 - a PRET command failed<br>
		 * <i>native declaration : include\curl\curl.h:526</i>
		 */
		public static final int CURLE_FTP_PRET_FAILED = 84;
		/**
		 * 85 - mismatch of RTSP CSeq numbers<br>
		 * <i>native declaration : include\curl\curl.h:527</i>
		 */
		public static final int CURLE_RTSP_CSEQ_ERROR = 85;
		/**
		 * 86 - mismatch of RTSP Session Ids<br>
		 * <i>native declaration : include\curl\curl.h:528</i>
		 */
		public static final int CURLE_RTSP_SESSION_ERROR = 86;
		/**
		 * 87 - unable to parse FTP file list<br>
		 * <i>native declaration : include\curl\curl.h:529</i>
		 */
		public static final int CURLE_FTP_BAD_FILE_LIST = 87;
		/**
		 * 88 - chunk callback reported error<br>
		 * <i>native declaration : include\curl\curl.h:530</i>
		 */
		public static final int CURLE_CHUNK_FAILED = 88;
		/**
		 * 89 - No connection available, the<br>
		 * session will be queued<br>
		 * <i>native declaration : include\curl\curl.h:531</i>
		 */
		public static final int CURLE_NO_CONNECTION_AVAILABLE = 89;
		/**
		 * 90 - specified pinned public key did not<br>
		 * match<br>
		 * <i>native declaration : include\curl\curl.h:533</i>
		 */
		public static final int CURLE_SSL_PINNEDPUBKEYNOTMATCH = 90;
		/**
		 * 91 - invalid certificate status<br>
		 * <i>native declaration : include\curl\curl.h:535</i>
		 */
		public static final int CURLE_SSL_INVALIDCERTSTATUS = 91;
		/**
		 * 92 - stream error in HTTP/2 framing layer<br>
		 * <i>native declaration : include\curl\curl.h:536</i>
		 */
		public static final int CURLE_HTTP2_STREAM = 92;
		/**
		 * 93 - an api function was called from<br>
		 * inside a callback<br>
		 * <i>native declaration : include\curl\curl.h:538</i>
		 */
		public static final int CURLE_RECURSIVE_API_CALL = 93;
		/**
		 * 94 - an authentication function returned an<br>
		 * error<br>
		 * <i>native declaration : include\curl\curl.h:540</i>
		 */
		public static final int CURLE_AUTH_ERROR = 94;
		/**
		 * 95 - An HTTP/3 layer problem<br>
		 * <i>native declaration : include\curl\curl.h:542</i>
		 */
		public static final int CURLE_HTTP3 = 95;
		/**
		 * 96 - QUIC connection error<br>
		 * <i>native declaration : include\curl\curl.h:543</i>
		 */
		public static final int CURLE_QUIC_CONNECT_ERROR = 96;
		/**
		 * never use!<br>
		 * <i>native declaration : include\curl\curl.h:544</i>
		 */
		public static final int CURL_LAST = 97;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_proxytype {
		/**
		 * added in 7.10, new in 7.19.4 default is to use<br>
		 * CONNECT HTTP/1.1<br>
		 * <i>native declaration : include\curl\curl.h:633</i>
		 */
		public static final int CURLPROXY_HTTP = 0;
		/**
		 * added in 7.19.4, force to use CONNECT<br>
		 * HTTP/1.0<br>
		 * <i>native declaration : include\curl\curl.h:635</i>
		 */
		public static final int CURLPROXY_HTTP_1_0 = 1;
		/**
		 * added in 7.52.0<br>
		 * <i>native declaration : include\curl\curl.h:637</i>
		 */
		public static final int CURLPROXY_HTTPS = 2;
		/**
		 * support added in 7.15.2, enum existed already<br>
		 * in 7.10<br>
		 * <i>native declaration : include\curl\curl.h:638</i>
		 */
		public static final int CURLPROXY_SOCKS4 = 4;
		/**
		 * added in 7.10<br>
		 * <i>native declaration : include\curl\curl.h:640</i>
		 */
		public static final int CURLPROXY_SOCKS5 = 5;
		/**
		 * added in 7.18.0<br>
		 * <i>native declaration : include\curl\curl.h:641</i>
		 */
		public static final int CURLPROXY_SOCKS4A = 6;
		/**
		 * Use the SOCKS5 protocol but pass along the<br>
		 * host name rather than the IP address. added<br>
		 * in 7.18.0<br>
		 * <i>native declaration : include\curl\curl.h:642</i>
		 */
		public static final int CURLPROXY_SOCKS5_HOSTNAME = 7;
	};
	/**
	 * <i>native declaration : include\curl\curl.h:697</i><br>
	 * enum values
	 */
	public static interface curl_khtype {
		/** <i>native declaration : include\curl\curl.h:698</i> */
		public static final int CURLKHTYPE_UNKNOWN = 0;
		/** <i>native declaration : include\curl\curl.h:699</i> */
		public static final int CURLKHTYPE_RSA1 = 1;
		/** <i>native declaration : include\curl\curl.h:700</i> */
		public static final int CURLKHTYPE_RSA = 2;
		/** <i>native declaration : include\curl\curl.h:701</i> */
		public static final int CURLKHTYPE_DSS = 3;
		/** <i>native declaration : include\curl\curl.h:702</i> */
		public static final int CURLKHTYPE_ECDSA = 4;
		/** <i>native declaration : include\curl\curl.h:703</i> */
		public static final int CURLKHTYPE_ED25519 = 5;
	};
	/**
	 * this is the set of return values expected from the curl_sshkeycallback<br>
	 * callback<br>
	 * <i>native declaration : include\curl\curl.h:715</i><br>
	 * enum values
	 */
	public static interface curl_khstat {
		/** <i>native declaration : include\curl\curl.h:716</i> */
		public static final int CURLKHSTAT_FINE_ADD_TO_FILE = 0;
		/** <i>native declaration : include\curl\curl.h:717</i> */
		public static final int CURLKHSTAT_FINE = 1;
		/**
		 * reject the connection, return an error<br>
		 * <i>native declaration : include\curl\curl.h:718</i>
		 */
		public static final int CURLKHSTAT_REJECT = 2;
		/**
		 * do not accept it, but we can't answer right now so<br>
		 * this causes a CURLE_DEFER error but otherwise the<br>
		 * connection will be left intact etc<br>
		 * <i>native declaration : include\curl\curl.h:719</i>
		 */
		public static final int CURLKHSTAT_DEFER = 3;
		/**
		 * not for use, only a marker for last-in-list<br>
		 * <i>native declaration : include\curl\curl.h:722</i>
		 */
		public static final int CURLKHSTAT_LAST = 4;
	};
	/**
	 * this is the set of status codes pass in to the callback<br>
	 * <i>native declaration : include\curl\curl.h:726</i><br>
	 * enum values
	 */
	public static interface curl_khmatch {
		/**
		 * match<br>
		 * <i>native declaration : include\curl\curl.h:727</i>
		 */
		public static final int CURLKHMATCH_OK = 0;
		/**
		 * host found, key mismatch!<br>
		 * <i>native declaration : include\curl\curl.h:728</i>
		 */
		public static final int CURLKHMATCH_MISMATCH = 1;
		/**
		 * no matching host/key found<br>
		 * <i>native declaration : include\curl\curl.h:729</i>
		 */
		public static final int CURLKHMATCH_MISSING = 2;
		/**
		 * not for use, only a marker for last-in-list<br>
		 * <i>native declaration : include\curl\curl.h:730</i>
		 */
		public static final int CURLKHMATCH_LAST = 3;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_usessl {
		/**
		 * do not attempt to use SSL<br>
		 * <i>native declaration : include\curl\curl.h:742</i>
		 */
		public static final int CURLUSESSL_NONE = 0;
		/**
		 * try using SSL, proceed anyway otherwise<br>
		 * <i>native declaration : include\curl\curl.h:743</i>
		 */
		public static final int CURLUSESSL_TRY = 1;
		/**
		 * SSL for the control connection or fail<br>
		 * <i>native declaration : include\curl\curl.h:744</i>
		 */
		public static final int CURLUSESSL_CONTROL = 2;
		/**
		 * SSL for all communication or fail<br>
		 * <i>native declaration : include\curl\curl.h:745</i>
		 */
		public static final int CURLUSESSL_ALL = 3;
		/**
		 * not an option, never use<br>
		 * <i>native declaration : include\curl\curl.h:746</i>
		 */
		public static final int CURLUSESSL_LAST = 4;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_ftpccc {
		/**
		 * do not send CCC<br>
		 * <i>native declaration : include\curl\curl.h:794</i>
		 */
		public static final int CURLFTPSSL_CCC_NONE = 0;
		/**
		 * Let the server initiate the shutdown<br>
		 * <i>native declaration : include\curl\curl.h:795</i>
		 */
		public static final int CURLFTPSSL_CCC_PASSIVE = 1;
		/**
		 * Initiate the shutdown<br>
		 * <i>native declaration : include\curl\curl.h:796</i>
		 */
		public static final int CURLFTPSSL_CCC_ACTIVE = 2;
		/**
		 * not an option, never use<br>
		 * <i>native declaration : include\curl\curl.h:797</i>
		 */
		public static final int CURLFTPSSL_CCC_LAST = 3;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_ftpauth {
		/**
		 * let libcurl decide<br>
		 * <i>native declaration : include\curl\curl.h:802</i>
		 */
		public static final int CURLFTPAUTH_DEFAULT = 0;
		/**
		 * use "AUTH SSL"<br>
		 * <i>native declaration : include\curl\curl.h:803</i>
		 */
		public static final int CURLFTPAUTH_SSL = 1;
		/**
		 * use "AUTH TLS"<br>
		 * <i>native declaration : include\curl\curl.h:804</i>
		 */
		public static final int CURLFTPAUTH_TLS = 2;
		/**
		 * not an option, never use<br>
		 * <i>native declaration : include\curl\curl.h:805</i>
		 */
		public static final int CURLFTPAUTH_LAST = 3;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_ftpcreatedir {
		/**
		 * do NOT create missing dirs!<br>
		 * <i>native declaration : include\curl\curl.h:810</i>
		 */
		public static final int CURLFTP_CREATE_DIR_NONE = 0;
		/**
		 * (FTP/SFTP) if CWD fails, try MKD and then CWD<br>
		 * again if MKD succeeded, for SFTP this does<br>
		 * similar magic<br>
		 * <i>native declaration : include\curl\curl.h:811</i>
		 */
		public static final int CURLFTP_CREATE_DIR = 1;
		/**
		 * (FTP only) if CWD fails, try MKD and then CWD<br>
		 * again even if MKD failed!<br>
		 * <i>native declaration : include\curl\curl.h:814</i>
		 */
		public static final int CURLFTP_CREATE_DIR_RETRY = 2;
		/**
		 * not an option, never use<br>
		 * <i>native declaration : include\curl\curl.h:816</i>
		 */
		public static final int CURLFTP_CREATE_DIR_LAST = 3;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_ftpmethod {
		/**
		 * let libcurl pick<br>
		 * <i>native declaration : include\curl\curl.h:821</i>
		 */
		public static final int CURLFTPMETHOD_DEFAULT = 0;
		/**
		 * single CWD operation for each path part<br>
		 * <i>native declaration : include\curl\curl.h:822</i>
		 */
		public static final int CURLFTPMETHOD_MULTICWD = 1;
		/**
		 * no CWD at all<br>
		 * <i>native declaration : include\curl\curl.h:823</i>
		 */
		public static final int CURLFTPMETHOD_NOCWD = 2;
		/**
		 * one CWD to full dir, then work on file<br>
		 * <i>native declaration : include\curl\curl.h:824</i>
		 */
		public static final int CURLFTPMETHOD_SINGLECWD = 3;
		/**
		 * not an option, never use<br>
		 * <i>native declaration : include\curl\curl.h:825</i>
		 */
		public static final int CURLFTPMETHOD_LAST = 4;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface CURLoption {
		/**
		 * This is the FILE * or void * the regular output should be written to.<br>
		 * <i>native declaration : include\curl\curl.h:895</i>
		 */
		public static final int CURLOPT_WRITEDATA = 10000 + 1;
		/**
		 * The full URL to get/put<br>
		 * <i>native declaration : include\curl\curl.h:898</i>
		 */
		public static final int CURLOPT_URL = 10000 + 2;
		/**
		 * Port number to connect to, if other than default.<br>
		 * <i>native declaration : include\curl\curl.h:901</i>
		 */
		public static final int CURLOPT_PORT = 0 + 3;
		/**
		 * Name of proxy to use.<br>
		 * <i>native declaration : include\curl\curl.h:904</i>
		 */
		public static final int CURLOPT_PROXY = 10000 + 4;
		/**
		 * "user:password;options" to use when fetching.<br>
		 * <i>native declaration : include\curl\curl.h:907</i>
		 */
		public static final int CURLOPT_USERPWD = 10000 + 5;
		/**
		 * "user:password" to use with proxy.<br>
		 * <i>native declaration : include\curl\curl.h:910</i>
		 */
		public static final int CURLOPT_PROXYUSERPWD = 10000 + 6;
		/**
		 * Range to get, specified as an ASCII string.<br>
		 * <i>native declaration : include\curl\curl.h:913</i>
		 */
		public static final int CURLOPT_RANGE = 10000 + 7;
		/**
		 * Specified file stream to upload from (use as input):<br>
		 * <i>native declaration : include\curl\curl.h:918</i>
		 */
		public static final int CURLOPT_READDATA = 10000 + 9;
		/**
		 * Buffer to receive error messages in, must be at least CURL_ERROR_SIZE<br>
		 * bytes big.<br>
		 * <i>native declaration : include\curl\curl.h:922</i>
		 */
		public static final int CURLOPT_ERRORBUFFER = 10000 + 10;
		/**
		 * Function that will be called to store the output (instead of fwrite). The<br>
		 * parameters will use fwrite() syntax, make sure to follow them.<br>
		 * <i>native declaration : include\curl\curl.h:926</i>
		 */
		public static final int CURLOPT_WRITEFUNCTION = 20000 + 11;
		/**
		 * Function that will be called to read the input (instead of fread). The<br>
		 * parameters will use fread() syntax, make sure to follow them.<br>
		 * <i>native declaration : include\curl\curl.h:930</i>
		 */
		public static final int CURLOPT_READFUNCTION = 20000 + 12;
		/**
		 * Time-out the read operation after this amount of seconds<br>
		 * <i>native declaration : include\curl\curl.h:933</i>
		 */
		public static final int CURLOPT_TIMEOUT = 0 + 13;
		/**
		 * If the CURLOPT_INFILE is used, this can be used to inform libcurl about<br>
		 * how large the file being sent really is. That allows better error<br>
		 * checking and better verifies that the upload was successful. -1 means<br>
		 * unknown size.<br>
		 * * For large file support, there is also a _LARGE version of the key<br>
		 * which takes an off_t type, allowing platforms with larger off_t<br>
		 * sizes to handle larger files.  See below for INFILESIZE_LARGE.<br>
		 * <i>native declaration : include\curl\curl.h:944</i>
		 */
		public static final int CURLOPT_INFILESIZE = 0 + 14;
		/**
		 * POST static input fields.<br>
		 * <i>native declaration : include\curl\curl.h:947</i>
		 */
		public static final int CURLOPT_POSTFIELDS = 10000 + 15;
		/**
		 * Set the referrer page (needed by some CGIs)<br>
		 * <i>native declaration : include\curl\curl.h:950</i>
		 */
		public static final int CURLOPT_REFERER = 10000 + 16;
		/**
		 * Set the FTP PORT string (interface name, named or numerical IP address)<br>
		 * Use i.e '-' to use default address.<br>
		 * <i>native declaration : include\curl\curl.h:954</i>
		 */
		public static final int CURLOPT_FTPPORT = 10000 + 17;
		/**
		 * Set the User-Agent string (examined by some CGIs)<br>
		 * <i>native declaration : include\curl\curl.h:957</i>
		 */
		public static final int CURLOPT_USERAGENT = 10000 + 18;
		/**
		 * Set the "low speed limit"<br>
		 * <i>native declaration : include\curl\curl.h:966</i>
		 */
		public static final int CURLOPT_LOW_SPEED_LIMIT = 0 + 19;
		/**
		 * Set the "low speed time"<br>
		 * <i>native declaration : include\curl\curl.h:969</i>
		 */
		public static final int CURLOPT_LOW_SPEED_TIME = 0 + 20;
		/**
		 * Set the continuation offset.<br>
		 * * Note there is also a _LARGE version of this key which uses<br>
		 * off_t types, allowing for large file offsets on platforms which<br>
		 * use larger-than-32-bit off_t's.  Look below for RESUME_FROM_LARGE.<br>
		 * <i>native declaration : include\curl\curl.h:977</i>
		 */
		public static final int CURLOPT_RESUME_FROM = 0 + 21;
		/**
		 * Set cookie in request:<br>
		 * <i>native declaration : include\curl\curl.h:980</i>
		 */
		public static final int CURLOPT_COOKIE = 10000 + 22;
		/**
		 * This points to a linked list of headers, struct curl_slist kind. This<br>
		 * list is also used for RTSP (in spite of its name)<br>
		 * <i>native declaration : include\curl\curl.h:984</i>
		 */
		public static final int CURLOPT_HTTPHEADER = 10000 + 23;
		/**
		 * This points to a linked list of post entries, struct curl_httppost<br>
		 * <i>native declaration : include\curl\curl.h:987</i>
		 */
		public static final int CURLOPT_HTTPPOST = 10000 + 24;
		/**
		 * name of the file keeping your private SSL-certificate<br>
		 * <i>native declaration : include\curl\curl.h:990</i>
		 */
		public static final int CURLOPT_SSLCERT = 10000 + 25;
		/**
		 * password for the SSL or SSH private key<br>
		 * <i>native declaration : include\curl\curl.h:993</i>
		 */
		public static final int CURLOPT_KEYPASSWD = 10000 + 26;
		/**
		 * send TYPE parameter?<br>
		 * <i>native declaration : include\curl\curl.h:996</i>
		 */
		public static final int CURLOPT_CRLF = 0 + 27;
		/**
		 * send linked-list of QUOTE commands<br>
		 * <i>native declaration : include\curl\curl.h:999</i>
		 */
		public static final int CURLOPT_QUOTE = 10000 + 28;
		/**
		 * send FILE * or void * to store headers to, if you use a callback it<br>
		 * is simply passed to the callback unmodified<br>
		 * <i>native declaration : include\curl\curl.h:1003</i>
		 */
		public static final int CURLOPT_HEADERDATA = 10000 + 29;
		/**
		 * point to a file to read the initial cookies from, also enables<br>
		 * "cookie awareness"<br>
		 * <i>native declaration : include\curl\curl.h:1007</i>
		 */
		public static final int CURLOPT_COOKIEFILE = 10000 + 31;
		/**
		 * What version to specifically try to use.<br>
		 * See CURL_SSLVERSION defines below.<br>
		 * <i>native declaration : include\curl\curl.h:1011</i>
		 */
		public static final int CURLOPT_SSLVERSION = 0 + 32;
		/**
		 * What kind of HTTP time condition to use, see defines<br>
		 * <i>native declaration : include\curl\curl.h:1014</i>
		 */
		public static final int CURLOPT_TIMECONDITION = 0 + 33;
		/**
		 * Time to use with the above condition. Specified in number of seconds<br>
		 * since 1 Jan 1970<br>
		 * <i>native declaration : include\curl\curl.h:1018</i>
		 */
		public static final int CURLOPT_TIMEVALUE = 0 + 34;
		/**
		 * Custom request, for customizing the get command like<br>
		 * HTTP: DELETE, TRACE and others<br>
		 * FTP: to use a different list command<br>
		 * <i>native declaration : include\curl\curl.h:1026</i>
		 */
		public static final int CURLOPT_CUSTOMREQUEST = 10000 + 36;
		/**
		 * FILE handle to use instead of stderr<br>
		 * <i>native declaration : include\curl\curl.h:1029</i>
		 */
		public static final int CURLOPT_STDERR = 10000 + 37;
		/**
		 * send linked-list of post-transfer QUOTE commands<br>
		 * <i>native declaration : include\curl\curl.h:1034</i>
		 */
		public static final int CURLOPT_POSTQUOTE = 10000 + 39;
		/**
		 * OBSOLETE, do not use!<br>
		 * <i>native declaration : include\curl\curl.h:1037</i>
		 */
		public static final int CURLOPT_OBSOLETE40 = 10000 + 40;
		/**
		 * talk a lot<br>
		 * <i>native declaration : include\curl\curl.h:1040</i>
		 */
		public static final int CURLOPT_VERBOSE = 0 + 41;
		/**
		 * throw the header out too<br>
		 * <i>native declaration : include\curl\curl.h:1043</i>
		 */
		public static final int CURLOPT_HEADER = 0 + 42;
		/**
		 * shut off the progress meter<br>
		 * <i>native declaration : include\curl\curl.h:1046</i>
		 */
		public static final int CURLOPT_NOPROGRESS = 0 + 43;
		/**
		 * use HEAD to get http document<br>
		 * <i>native declaration : include\curl\curl.h:1049</i>
		 */
		public static final int CURLOPT_NOBODY = 0 + 44;
		/**
		 * no output on http error codes >= 400<br>
		 * <i>native declaration : include\curl\curl.h:1052</i>
		 */
		public static final int CURLOPT_FAILONERROR = 0 + 45;
		/**
		 * this is an upload<br>
		 * <i>native declaration : include\curl\curl.h:1055</i>
		 */
		public static final int CURLOPT_UPLOAD = 0 + 46;
		/**
		 * HTTP POST method<br>
		 * <i>native declaration : include\curl\curl.h:1058</i>
		 */
		public static final int CURLOPT_POST = 0 + 47;
		/**
		 * bare names when listing directories<br>
		 * <i>native declaration : include\curl\curl.h:1061</i>
		 */
		public static final int CURLOPT_DIRLISTONLY = 0 + 48;
		/**
		 * Append instead of overwrite on upload!<br>
		 * <i>native declaration : include\curl\curl.h:1064</i>
		 */
		public static final int CURLOPT_APPEND = 0 + 50;
		/**
		 * Specify whether to read the user+password from the .netrc or the URL.<br>
		 * This must be one of the CURL_NETRC_* enums below.<br>
		 * <i>native declaration : include\curl\curl.h:1068</i>
		 */
		public static final int CURLOPT_NETRC = 0 + 51;
		/**
		 * use Location: Luke!<br>
		 * <i>native declaration : include\curl\curl.h:1071</i>
		 */
		public static final int CURLOPT_FOLLOWLOCATION = 0 + 52;
		/**
		 * transfer data in text/ASCII format<br>
		 * <i>native declaration : include\curl\curl.h:1074</i>
		 */
		public static final int CURLOPT_TRANSFERTEXT = 0 + 53;
		/**
		 * HTTP PUT<br>
		 * <i>native declaration : include\curl\curl.h:1077</i>
		 */
		public static final int CURLOPT_PUT = 0 + 54;
		/**
		 * DEPRECATED<br>
		 * Function that will be called instead of the internal progress display<br>
		 * function. This function should be defined as the curl_progress_callback<br>
		 * prototype defines.<br>
		 * <i>native declaration : include\curl\curl.h:1085</i>
		 */
		public static final int CURLOPT_PROGRESSFUNCTION = 20000 + 56;
		/**
		 * Data passed to the CURLOPT_PROGRESSFUNCTION and CURLOPT_XFERINFOFUNCTION<br>
		 * callbacks<br>
		 * <i>native declaration : include\curl\curl.h:1089</i>
		 */
		public static final int CURLOPT_PROGRESSDATA = 10000 + 57;
		/**
		 * We want the referrer field set automatically when following locations<br>
		 * <i>native declaration : include\curl\curl.h:1093</i>
		 */
		public static final int CURLOPT_AUTOREFERER = 0 + 58;
		/**
		 * Port of the proxy, can be set in the proxy string as well with:<br>
		 * "[host]:[port]"<br>
		 * <i>native declaration : include\curl\curl.h:1097</i>
		 */
		public static final int CURLOPT_PROXYPORT = 0 + 59;
		/**
		 * size of the POST input data, if strlen() is not good to use<br>
		 * <i>native declaration : include\curl\curl.h:1100</i>
		 */
		public static final int CURLOPT_POSTFIELDSIZE = 0 + 60;
		/**
		 * tunnel non-http operations through a HTTP proxy<br>
		 * <i>native declaration : include\curl\curl.h:1103</i>
		 */
		public static final int CURLOPT_HTTPPROXYTUNNEL = 0 + 61;
		/**
		 * Set the interface string to use as outgoing network interface<br>
		 * <i>native declaration : include\curl\curl.h:1106</i>
		 */
		public static final int CURLOPT_INTERFACE = 10000 + 62;
		/**
		 * Set the krb4/5 security level, this also enables krb4/5 awareness.  This<br>
		 * is a string, 'clear', 'safe', 'confidential' or 'private'.  If the string<br>
		 * is set but doesn't match one of these, 'private' will be used.<br>
		 * <i>native declaration : include\curl\curl.h:1111</i>
		 */
		public static final int CURLOPT_KRBLEVEL = 10000 + 63;
		/**
		 * Set if we should verify the peer in ssl handshake, set 1 to verify.<br>
		 * <i>native declaration : include\curl\curl.h:1114</i>
		 */
		public static final int CURLOPT_SSL_VERIFYPEER = 0 + 64;
		/**
		 * The CApath or CAfile used to validate the peer certificate<br>
		 * this option is used only if SSL_VERIFYPEER is true<br>
		 * <i>native declaration : include\curl\curl.h:1118</i>
		 */
		public static final int CURLOPT_CAINFO = 10000 + 65;
		/**
		 * Maximum number of http redirects to follow<br>
		 * <i>native declaration : include\curl\curl.h:1124</i>
		 */
		public static final int CURLOPT_MAXREDIRS = 0 + 68;
		/**
		 * Pass a long set to 1 to get the date of the requested document (if<br>
		 * possible)! Pass a zero to shut it off.<br>
		 * <i>native declaration : include\curl\curl.h:1128</i>
		 */
		public static final int CURLOPT_FILETIME = 0 + 69;
		/**
		 * This points to a linked list of telnet options<br>
		 * <i>native declaration : include\curl\curl.h:1131</i>
		 */
		public static final int CURLOPT_TELNETOPTIONS = 10000 + 70;
		/**
		 * Max amount of cached alive connections<br>
		 * <i>native declaration : include\curl\curl.h:1134</i>
		 */
		public static final int CURLOPT_MAXCONNECTS = 0 + 71;
		/**
		 * OBSOLETE, do not use!<br>
		 * <i>native declaration : include\curl\curl.h:1137</i>
		 */
		public static final int CURLOPT_OBSOLETE72 = 0 + 72;
		/**
		 * Set to explicitly use a new connection for the upcoming transfer.<br>
		 * Do not use this unless you're absolutely sure of this, as it makes the<br>
		 * operation slower and is less friendly for the network.<br>
		 * <i>native declaration : include\curl\curl.h:1144</i>
		 */
		public static final int CURLOPT_FRESH_CONNECT = 0 + 74;
		/**
		 * Set to explicitly forbid the upcoming transfer's connection to be re-used<br>
		 * when done. Do not use this unless you're absolutely sure of this, as it<br>
		 * makes the operation slower and is less friendly for the network.<br>
		 * <i>native declaration : include\curl\curl.h:1149</i>
		 */
		public static final int CURLOPT_FORBID_REUSE = 0 + 75;
		/**
		 * Set to a file name that contains random data for libcurl to use to<br>
		 * seed the random engine when doing SSL connects.<br>
		 * <i>native declaration : include\curl\curl.h:1153</i>
		 */
		public static final int CURLOPT_RANDOM_FILE = 10000 + 76;
		/**
		 * Set to the Entropy Gathering Daemon socket pathname<br>
		 * <i>native declaration : include\curl\curl.h:1156</i>
		 */
		public static final int CURLOPT_EGDSOCKET = 10000 + 77;
		/**
		 * Time-out connect operations after this amount of seconds, if connects are<br>
		 * OK within this time, then fine... This only aborts the connect phase.<br>
		 * <i>native declaration : include\curl\curl.h:1160</i>
		 */
		public static final int CURLOPT_CONNECTTIMEOUT = 0 + 78;
		/**
		 * Function that will be called to store headers (instead of fwrite). The<br>
		 * parameters will use fwrite() syntax, make sure to follow them.<br>
		 * <i>native declaration : include\curl\curl.h:1164</i>
		 */
		public static final int CURLOPT_HEADERFUNCTION = 20000 + 79;
		/**
		 * Set this to force the HTTP request to get back to GET. Only really usable<br>
		 * if POST, PUT or a custom request have been used first.<br>
		 * <i>native declaration : include\curl\curl.h:1169</i>
		 */
		public static final int CURLOPT_HTTPGET = 0 + 80;
		/**
		 * Set if we should verify the Common name from the peer certificate in ssl<br>
		 * handshake, set 1 to check existence, 2 to ensure that it matches the<br>
		 * provided hostname.<br>
		 * <i>native declaration : include\curl\curl.h:1174</i>
		 */
		public static final int CURLOPT_SSL_VERIFYHOST = 0 + 81;
		/**
		 * Specify which file name to write all known cookies in after completed<br>
		 * operation. Set file name to "-" (dash) to make it go to stdout.<br>
		 * <i>native declaration : include\curl\curl.h:1178</i>
		 */
		public static final int CURLOPT_COOKIEJAR = 10000 + 82;
		/**
		 * Specify which SSL ciphers to use<br>
		 * <i>native declaration : include\curl\curl.h:1181</i>
		 */
		public static final int CURLOPT_SSL_CIPHER_LIST = 10000 + 83;
		/**
		 * Specify which HTTP version to use! This must be set to one of the<br>
		 * CURL_HTTP_VERSION* enums set below.<br>
		 * <i>native declaration : include\curl\curl.h:1185</i>
		 */
		public static final int CURLOPT_HTTP_VERSION = 0 + 84;
		/**
		 * Specifically switch on or off the FTP engine's use of the EPSV command. By<br>
		 * default, that one will always be attempted before the more traditional<br>
		 * PASV command.<br>
		 * <i>native declaration : include\curl\curl.h:1190</i>
		 */
		public static final int CURLOPT_FTP_USE_EPSV = 0 + 85;
		/**
		 * type of the file keeping your SSL-certificate ("DER", "PEM", "ENG")<br>
		 * <i>native declaration : include\curl\curl.h:1193</i>
		 */
		public static final int CURLOPT_SSLCERTTYPE = 10000 + 86;
		/**
		 * name of the file keeping your private SSL-key<br>
		 * <i>native declaration : include\curl\curl.h:1196</i>
		 */
		public static final int CURLOPT_SSLKEY = 10000 + 87;
		/**
		 * type of the file keeping your private SSL-key ("DER", "PEM", "ENG")<br>
		 * <i>native declaration : include\curl\curl.h:1199</i>
		 */
		public static final int CURLOPT_SSLKEYTYPE = 10000 + 88;
		/**
		 * crypto engine for the SSL-sub system<br>
		 * <i>native declaration : include\curl\curl.h:1202</i>
		 */
		public static final int CURLOPT_SSLENGINE = 10000 + 89;
		/**
		 * set the crypto engine for the SSL-sub system as default<br>
		 * the param has no meaning...<br>
		 * <i>native declaration : include\curl\curl.h:1207</i>
		 */
		public static final int CURLOPT_SSLENGINE_DEFAULT = 0 + 90;
		/**
		 * DEPRECATED, do not use!<br>
		 * <i>native declaration : include\curl\curl.h:1211</i>
		 */
		public static final int CURLOPT_DNS_USE_GLOBAL_CACHE = 0 + 91;
		/**
		 * DNS cache timeout<br>
		 * <i>native declaration : include\curl\curl.h:1214</i>
		 */
		public static final int CURLOPT_DNS_CACHE_TIMEOUT = 0 + 92;
		/**
		 * send linked-list of pre-transfer QUOTE commands<br>
		 * <i>native declaration : include\curl\curl.h:1217</i>
		 */
		public static final int CURLOPT_PREQUOTE = 10000 + 93;
		/**
		 * set the debug function<br>
		 * <i>native declaration : include\curl\curl.h:1220</i>
		 */
		public static final int CURLOPT_DEBUGFUNCTION = 20000 + 94;
		/**
		 * set the data for the debug function<br>
		 * <i>native declaration : include\curl\curl.h:1223</i>
		 */
		public static final int CURLOPT_DEBUGDATA = 10000 + 95;
		/**
		 * mark this as start of a cookie session<br>
		 * <i>native declaration : include\curl\curl.h:1226</i>
		 */
		public static final int CURLOPT_COOKIESESSION = 0 + 96;
		/**
		 * The CApath directory used to validate the peer certificate<br>
		 * this option is used only if SSL_VERIFYPEER is true<br>
		 * <i>native declaration : include\curl\curl.h:1230</i>
		 */
		public static final int CURLOPT_CAPATH = 10000 + 97;
		/**
		 * Instruct libcurl to use a smaller receive buffer<br>
		 * <i>native declaration : include\curl\curl.h:1233</i>
		 */
		public static final int CURLOPT_BUFFERSIZE = 0 + 98;
		/**
		 * Instruct libcurl to not use any signal/alarm handlers, even when using<br>
		 * timeouts. This option is useful for multi-threaded applications.<br>
		 * See libcurl-the-guide for more background information.<br>
		 * <i>native declaration : include\curl\curl.h:1238</i>
		 */
		public static final int CURLOPT_NOSIGNAL = 0 + 99;
		/**
		 * Provide a CURLShare for mutexing non-ts data<br>
		 * <i>native declaration : include\curl\curl.h:1241</i>
		 */
		public static final int CURLOPT_SHARE = 10000 + 100;
		/**
		 * indicates type of proxy. accepted values are CURLPROXY_HTTP (default),<br>
		 * CURLPROXY_HTTPS, CURLPROXY_SOCKS4, CURLPROXY_SOCKS4A and<br>
		 * CURLPROXY_SOCKS5.<br>
		 * <i>native declaration : include\curl\curl.h:1246</i>
		 */
		public static final int CURLOPT_PROXYTYPE = 0 + 101;
		/**
		 * Set the Accept-Encoding string. Use this to tell a server you would like<br>
		 * the response to be compressed. Before 7.21.6, this was known as<br>
		 * CURLOPT_ENCODING<br>
		 * <i>native declaration : include\curl\curl.h:1251</i>
		 */
		public static final int CURLOPT_ACCEPT_ENCODING = 10000 + 102;
		/**
		 * Set pointer to private data<br>
		 * <i>native declaration : include\curl\curl.h:1254</i>
		 */
		public static final int CURLOPT_PRIVATE = 10000 + 103;
		/**
		 * Set aliases for HTTP 200 in the HTTP Response header<br>
		 * <i>native declaration : include\curl\curl.h:1257</i>
		 */
		public static final int CURLOPT_HTTP200ALIASES = 10000 + 104;
		/**
		 * Continue to send authentication (user+password) when following locations,<br>
		 * even when hostname changed. This can potentially send off the name<br>
		 * and password to whatever host the server decides.<br>
		 * <i>native declaration : include\curl\curl.h:1262</i>
		 */
		public static final int CURLOPT_UNRESTRICTED_AUTH = 0 + 105;
		/**
		 * Specifically switch on or off the FTP engine's use of the EPRT command (<br>
		 * it also disables the LPRT attempt). By default, those ones will always be<br>
		 * attempted before the good old traditional PORT command.<br>
		 * <i>native declaration : include\curl\curl.h:1267</i>
		 */
		public static final int CURLOPT_FTP_USE_EPRT = 0 + 106;
		/**
		 * Set this to a bitmask value to enable the particular authentications<br>
		 * methods you like. Use this in combination with CURLOPT_USERPWD.<br>
		 * Note that setting multiple bits may cause extra network round-trips.<br>
		 * <i>native declaration : include\curl\curl.h:1272</i>
		 */
		public static final int CURLOPT_HTTPAUTH = 0 + 107;
		/**
		 * Set the ssl context callback function, currently only for OpenSSL or<br>
		 * WolfSSL ssl_ctx, or mbedTLS mbedtls_ssl_config in the second argument.<br>
		 * The function must match the curl_ssl_ctx_callback prototype.<br>
		 * <i>native declaration : include\curl\curl.h:1277</i>
		 */
		public static final int CURLOPT_SSL_CTX_FUNCTION = 20000 + 108;
		/**
		 * Set the userdata for the ssl context callback function's third<br>
		 * argument<br>
		 * <i>native declaration : include\curl\curl.h:1281</i>
		 */
		public static final int CURLOPT_SSL_CTX_DATA = 10000 + 109;
		/**
		 * FTP Option that causes missing dirs to be created on the remote server.<br>
		 * In 7.19.4 we introduced the convenience enums for this option using the<br>
		 * CURLFTP_CREATE_DIR prefix.<br>
		 * <i>native declaration : include\curl\curl.h:1287</i>
		 */
		public static final int CURLOPT_FTP_CREATE_MISSING_DIRS = 0 + 110;
		/**
		 * Set this to a bitmask value to enable the particular authentications<br>
		 * methods you like. Use this in combination with CURLOPT_PROXYUSERPWD.<br>
		 * Note that setting multiple bits may cause extra network round-trips.<br>
		 * <i>native declaration : include\curl\curl.h:1292</i>
		 */
		public static final int CURLOPT_PROXYAUTH = 0 + 111;
		/**
		 * FTP option that changes the timeout, in seconds, associated with<br>
		 * getting a response.  This is different from transfer timeout time and<br>
		 * essentially places a demand on the FTP server to acknowledge commands<br>
		 * in a timely manner.<br>
		 * <i>native declaration : include\curl\curl.h:1298</i>
		 */
		public static final int CURLOPT_FTP_RESPONSE_TIMEOUT = 0 + 112;
		/**
		 * Set this option to one of the CURL_IPRESOLVE_* defines (see below) to<br>
		 * tell libcurl to resolve names to those IP versions only. This only has<br>
		 * affect on systems with support for more than one, i.e IPv4 _and_ IPv6.<br>
		 * <i>native declaration : include\curl\curl.h:1304</i>
		 */
		public static final int CURLOPT_IPRESOLVE = 0 + 113;
		/**
		 * Set this option to limit the size of a file that will be downloaded from<br>
		 * an HTTP or FTP server.<br>
		 * Note there is also _LARGE version which adds large file support for<br>
		 * platforms which have larger off_t sizes.  See MAXFILESIZE_LARGE below.<br>
		 * <i>native declaration : include\curl\curl.h:1311</i>
		 */
		public static final int CURLOPT_MAXFILESIZE = 0 + 114;
		/**
		 * See the comment for INFILESIZE above, but in short, specifies<br>
		 * the size of the file being uploaded.  -1 means unknown.<br>
		 * <i>native declaration : include\curl\curl.h:1316</i>
		 */
		public static final int CURLOPT_INFILESIZE_LARGE = 30000 + 115;
		/**
		 * Sets the continuation offset.  There is also a CURLOPTTYPE_LONG version<br>
		 * of this; look above for RESUME_FROM.<br>
		 * <i>native declaration : include\curl\curl.h:1321</i>
		 */
		public static final int CURLOPT_RESUME_FROM_LARGE = 30000 + 116;
		/**
		 * Sets the maximum size of data that will be downloaded from<br>
		 * an HTTP or FTP server.  See MAXFILESIZE above for the LONG version.<br>
		 * <i>native declaration : include\curl\curl.h:1326</i>
		 */
		public static final int CURLOPT_MAXFILESIZE_LARGE = 30000 + 117;
		/**
		 * Set this option to the file name of your .netrc file you want libcurl<br>
		 * to parse (using the CURLOPT_NETRC option). If not set, libcurl will do<br>
		 * a poor attempt to find the user's home directory and check for a .netrc<br>
		 * file in there.<br>
		 * <i>native declaration : include\curl\curl.h:1332</i>
		 */
		public static final int CURLOPT_NETRC_FILE = 10000 + 118;
		/**
		 * Enable SSL/TLS for FTP, pick one of:<br>
		 * CURLUSESSL_TRY     - try using SSL, proceed anyway otherwise<br>
		 * CURLUSESSL_CONTROL - SSL for the control connection or fail<br>
		 * CURLUSESSL_ALL     - SSL for all communication or fail<br>
		 * <i>native declaration : include\curl\curl.h:1339</i>
		 */
		public static final int CURLOPT_USE_SSL = 0 + 119;
		/**
		 * The _LARGE version of the standard POSTFIELDSIZE option<br>
		 * <i>native declaration : include\curl\curl.h:1342</i>
		 */
		public static final int CURLOPT_POSTFIELDSIZE_LARGE = 30000 + 120;
		/**
		 * Enable/disable the TCP Nagle algorithm<br>
		 * <i>native declaration : include\curl\curl.h:1345</i>
		 */
		public static final int CURLOPT_TCP_NODELAY = 0 + 121;
		/**
		 * When FTP over SSL/TLS is selected (with CURLOPT_USE_SSL), this option<br>
		 * can be used to change libcurl's default action which is to first try<br>
		 * "AUTH SSL" and then "AUTH TLS" in this order, and proceed when a OK<br>
		 * response has been received.<br>
		 * Available parameters are:<br>
		 * CURLFTPAUTH_DEFAULT - let libcurl decide<br>
		 * CURLFTPAUTH_SSL     - try "AUTH SSL" first, then TLS<br>
		 * CURLFTPAUTH_TLS     - try "AUTH TLS" first, then SSL<br>
		 * <i>native declaration : include\curl\curl.h:1365</i>
		 */
		public static final int CURLOPT_FTPSSLAUTH = 0 + 129;
		/** <i>native declaration : include\curl\curl.h:1367</i> */
		public static final int CURLOPT_IOCTLFUNCTION = 20000 + 130;
		/** <i>native declaration : include\curl\curl.h:1368</i> */
		public static final int CURLOPT_IOCTLDATA = 10000 + 131;
		/**
		 * zero terminated string for pass on to the FTP server when asked for<br>
		 * "account" info<br>
		 * <i>native declaration : include\curl\curl.h:1375</i>
		 */
		public static final int CURLOPT_FTP_ACCOUNT = 10000 + 134;
		/**
		 * feed cookie into cookie engine<br>
		 * <i>native declaration : include\curl\curl.h:1378</i>
		 */
		public static final int CURLOPT_COOKIELIST = 10000 + 135;
		/**
		 * ignore Content-Length<br>
		 * <i>native declaration : include\curl\curl.h:1381</i>
		 */
		public static final int CURLOPT_IGNORE_CONTENT_LENGTH = 0 + 136;
		/**
		 * Set to non-zero to skip the IP address received in a 227 PASV FTP server<br>
		 * response. Typically used for FTP-SSL purposes but is not restricted to<br>
		 * that. libcurl will then instead use the same IP address it used for the<br>
		 * control connection.<br>
		 * <i>native declaration : include\curl\curl.h:1387</i>
		 */
		public static final int CURLOPT_FTP_SKIP_PASV_IP = 0 + 137;
		/**
		 * Select "file method" to use when doing FTP, see the curl_ftpmethod<br>
		 * above.<br>
		 * <i>native declaration : include\curl\curl.h:1391</i>
		 */
		public static final int CURLOPT_FTP_FILEMETHOD = 0 + 138;
		/**
		 * Local port number to bind the socket to<br>
		 * <i>native declaration : include\curl\curl.h:1394</i>
		 */
		public static final int CURLOPT_LOCALPORT = 0 + 139;
		/**
		 * Number of ports to try, including the first one set with LOCALPORT.<br>
		 * Thus, setting it to 1 will make no additional attempts but the first.<br>
		 * <i>native declaration : include\curl\curl.h:1399</i>
		 */
		public static final int CURLOPT_LOCALPORTRANGE = 0 + 140;
		/**
		 * no transfer, set up connection and let application use the socket by<br>
		 * extracting it with CURLINFO_LASTSOCKET<br>
		 * <i>native declaration : include\curl\curl.h:1403</i>
		 */
		public static final int CURLOPT_CONNECT_ONLY = 0 + 141;
		/**
		 * Function that will be called to convert from the<br>
		 * network encoding (instead of using the iconv calls in libcurl)<br>
		 * <i>native declaration : include\curl\curl.h:1407</i>
		 */
		public static final int CURLOPT_CONV_FROM_NETWORK_FUNCTION = 20000 + 142;
		/**
		 * Function that will be called to convert to the<br>
		 * network encoding (instead of using the iconv calls in libcurl)<br>
		 * <i>native declaration : include\curl\curl.h:1411</i>
		 */
		public static final int CURLOPT_CONV_TO_NETWORK_FUNCTION = 20000 + 143;
		/**
		 * Function that will be called to convert from UTF8<br>
		 * (instead of using the iconv calls in libcurl)<br>
		 * Note that this is used only for SSL certificate processing<br>
		 * <i>native declaration : include\curl\curl.h:1416</i>
		 */
		public static final int CURLOPT_CONV_FROM_UTF8_FUNCTION = 20000 + 144;
		/**
		 * limit-rate: maximum number of bytes per second to send or receive<br>
		 * <i>native declaration : include\curl\curl.h:1420</i>
		 */
		public static final int CURLOPT_MAX_SEND_SPEED_LARGE = 30000 + 145;
		/** <i>native declaration : include\curl\curl.h:1421</i> */
		public static final int CURLOPT_MAX_RECV_SPEED_LARGE = 30000 + 146;
		/**
		 * Pointer to command string to send if USER/PASS fails.<br>
		 * <i>native declaration : include\curl\curl.h:1424</i>
		 */
		public static final int CURLOPT_FTP_ALTERNATIVE_TO_USER = 10000 + 147;
		/**
		 * callback function for setting socket options<br>
		 * <i>native declaration : include\curl\curl.h:1427</i>
		 */
		public static final int CURLOPT_SOCKOPTFUNCTION = 20000 + 148;
		/** <i>native declaration : include\curl\curl.h:1428</i> */
		public static final int CURLOPT_SOCKOPTDATA = 10000 + 149;
		/**
		 * set to 0 to disable session ID re-use for this transfer, default is<br>
		 * enabled (== 1)<br>
		 * <i>native declaration : include\curl\curl.h:1432</i>
		 */
		public static final int CURLOPT_SSL_SESSIONID_CACHE = 0 + 150;
		/**
		 * allowed SSH authentication methods<br>
		 * <i>native declaration : include\curl\curl.h:1435</i>
		 */
		public static final int CURLOPT_SSH_AUTH_TYPES = 0 + 151;
		/**
		 * Used by scp/sftp to do public/private key authentication<br>
		 * <i>native declaration : include\curl\curl.h:1438</i>
		 */
		public static final int CURLOPT_SSH_PUBLIC_KEYFILE = 10000 + 152;
		/** <i>native declaration : include\curl\curl.h:1439</i> */
		public static final int CURLOPT_SSH_PRIVATE_KEYFILE = 10000 + 153;
		/**
		 * Send CCC (Clear Command Channel) after authentication<br>
		 * <i>native declaration : include\curl\curl.h:1442</i>
		 */
		public static final int CURLOPT_FTP_SSL_CCC = 0 + 154;
		/**
		 * Same as TIMEOUT and CONNECTTIMEOUT, but with ms resolution<br>
		 * <i>native declaration : include\curl\curl.h:1445</i>
		 */
		public static final int CURLOPT_TIMEOUT_MS = 0 + 155;
		/** <i>native declaration : include\curl\curl.h:1446</i> */
		public static final int CURLOPT_CONNECTTIMEOUT_MS = 0 + 156;
		/**
		 * set to zero to disable the libcurl's decoding and thus pass the raw body<br>
		 * data to the application even when it is encoded/compressed<br>
		 * <i>native declaration : include\curl\curl.h:1450</i>
		 */
		public static final int CURLOPT_HTTP_TRANSFER_DECODING = 0 + 157;
		/** <i>native declaration : include\curl\curl.h:1451</i> */
		public static final int CURLOPT_HTTP_CONTENT_DECODING = 0 + 158;
		/**
		 * Permission used when creating new files and directories on the remote<br>
		 * server for protocols that support it, SFTP/SCP/FILE<br>
		 * <i>native declaration : include\curl\curl.h:1455</i>
		 */
		public static final int CURLOPT_NEW_FILE_PERMS = 0 + 159;
		/** <i>native declaration : include\curl\curl.h:1456</i> */
		public static final int CURLOPT_NEW_DIRECTORY_PERMS = 0 + 160;
		/**
		 * Set the behaviour of POST when redirecting. Values must be set to one<br>
		 * of CURL_REDIR* defines below. This used to be called CURLOPT_POST301<br>
		 * <i>native declaration : include\curl\curl.h:1460</i>
		 */
		public static final int CURLOPT_POSTREDIR = 0 + 161;
		/**
		 * used by scp/sftp to verify the host's public key<br>
		 * <i>native declaration : include\curl\curl.h:1463</i>
		 */
		public static final int CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 = 10000 + 162;
		/**
		 * Callback function for opening socket (instead of socket(2)). Optionally,<br>
		 * callback is able change the address or refuse to connect returning<br>
		 * CURL_SOCKET_BAD.  The callback should have type<br>
		 * curl_opensocket_callback<br>
		 * <i>native declaration : include\curl\curl.h:1469</i>
		 */
		public static final int CURLOPT_OPENSOCKETFUNCTION = 20000 + 163;
		/** <i>native declaration : include\curl\curl.h:1470</i> */
		public static final int CURLOPT_OPENSOCKETDATA = 10000 + 164;
		/**
		 * POST volatile input fields.<br>
		 * <i>native declaration : include\curl\curl.h:1473</i>
		 */
		public static final int CURLOPT_COPYPOSTFIELDS = 10000 + 165;
		/**
		 * set transfer mode (;type=<a|i>) when doing FTP via an HTTP proxy<br>
		 * <i>native declaration : include\curl\curl.h:1476</i>
		 */
		public static final int CURLOPT_PROXY_TRANSFER_MODE = 0 + 166;
		/**
		 * Callback function for seeking in the input stream<br>
		 * <i>native declaration : include\curl\curl.h:1479</i>
		 */
		public static final int CURLOPT_SEEKFUNCTION = 20000 + 167;
		/** <i>native declaration : include\curl\curl.h:1480</i> */
		public static final int CURLOPT_SEEKDATA = 10000 + 168;
		/**
		 * CRL file<br>
		 * <i>native declaration : include\curl\curl.h:1483</i>
		 */
		public static final int CURLOPT_CRLFILE = 10000 + 169;
		/**
		 * Issuer certificate<br>
		 * <i>native declaration : include\curl\curl.h:1486</i>
		 */
		public static final int CURLOPT_ISSUERCERT = 10000 + 170;
		/**
		 * (IPv6) Address scope<br>
		 * <i>native declaration : include\curl\curl.h:1489</i>
		 */
		public static final int CURLOPT_ADDRESS_SCOPE = 0 + 171;
		/**
		 * Collect certificate chain info and allow it to get retrievable with<br>
		 * CURLINFO_CERTINFO after the transfer is complete.<br>
		 * <i>native declaration : include\curl\curl.h:1493</i>
		 */
		public static final int CURLOPT_CERTINFO = 0 + 172;
		/**
		 * "name" and "pwd" to use when fetching.<br>
		 * <i>native declaration : include\curl\curl.h:1496</i>
		 */
		public static final int CURLOPT_USERNAME = 10000 + 173;
		/** <i>native declaration : include\curl\curl.h:1497</i> */
		public static final int CURLOPT_PASSWORD = 10000 + 174;
		/**
		 * "name" and "pwd" to use with Proxy when fetching.<br>
		 * <i>native declaration : include\curl\curl.h:1500</i>
		 */
		public static final int CURLOPT_PROXYUSERNAME = 10000 + 175;
		/** <i>native declaration : include\curl\curl.h:1501</i> */
		public static final int CURLOPT_PROXYPASSWORD = 10000 + 176;
		/**
		 * Comma separated list of hostnames defining no-proxy zones. These should<br>
		 * match both hostnames directly, and hostnames within a domain. For<br>
		 * example, local.com will match local.com and www.local.com, but NOT<br>
		 * notlocal.com or www.notlocal.com. For compatibility with other<br>
		 * implementations of this, .local.com will be considered to be the same as<br>
		 * local.com. A single * is the only valid wildcard, and effectively<br>
		 * disables the use of proxy.<br>
		 * <i>native declaration : include\curl\curl.h:1510</i>
		 */
		public static final int CURLOPT_NOPROXY = 10000 + 177;
		/**
		 * block size for TFTP transfers<br>
		 * <i>native declaration : include\curl\curl.h:1513</i>
		 */
		public static final int CURLOPT_TFTP_BLKSIZE = 0 + 178;
		/**
		 * DEPRECATED, do not use!<br>
		 * <i>native declaration : include\curl\curl.h:1517</i>
		 */
		public static final int CURLOPT_SOCKS5_GSSAPI_SERVICE = 10000 + 179;
		/**
		 * Socks Service<br>
		 * <i>native declaration : include\curl\curl.h:1520</i>
		 */
		public static final int CURLOPT_SOCKS5_GSSAPI_NEC = 0 + 180;
		/**
		 * set the bitmask for the protocols that are allowed to be used for the<br>
		 * transfer, which thus helps the app which takes URLs from users or other<br>
		 * external inputs and want to restrict what protocol(s) to deal<br>
		 * with. Defaults to CURLPROTO_ALL.<br>
		 * <i>native declaration : include\curl\curl.h:1526</i>
		 */
		public static final int CURLOPT_PROTOCOLS = 0 + 181;
		/**
		 * set the bitmask for the protocols that libcurl is allowed to follow to,<br>
		 * as a subset of the CURLOPT_PROTOCOLS ones. That means the protocol needs<br>
		 * to be set in both bitmasks to be allowed to get redirected to.<br>
		 * <i>native declaration : include\curl\curl.h:1531</i>
		 */
		public static final int CURLOPT_REDIR_PROTOCOLS = 0 + 182;
		/**
		 * set the SSH knownhost file name to use<br>
		 * <i>native declaration : include\curl\curl.h:1534</i>
		 */
		public static final int CURLOPT_SSH_KNOWNHOSTS = 10000 + 183;
		/**
		 * set the SSH host key callback, must point to a curl_sshkeycallback<br>
		 * function<br>
		 * <i>native declaration : include\curl\curl.h:1538</i>
		 */
		public static final int CURLOPT_SSH_KEYFUNCTION = 20000 + 184;
		/**
		 * set the SSH host key callback custom pointer<br>
		 * <i>native declaration : include\curl\curl.h:1541</i>
		 */
		public static final int CURLOPT_SSH_KEYDATA = 10000 + 185;
		/**
		 * set the SMTP mail originator<br>
		 * <i>native declaration : include\curl\curl.h:1544</i>
		 */
		public static final int CURLOPT_MAIL_FROM = 10000 + 186;
		/**
		 * set the list of SMTP mail receiver(s)<br>
		 * <i>native declaration : include\curl\curl.h:1547</i>
		 */
		public static final int CURLOPT_MAIL_RCPT = 10000 + 187;
		/**
		 * FTP: send PRET before PASV<br>
		 * <i>native declaration : include\curl\curl.h:1550</i>
		 */
		public static final int CURLOPT_FTP_USE_PRET = 0 + 188;
		/**
		 * RTSP request method (OPTIONS, SETUP, PLAY, etc...)<br>
		 * <i>native declaration : include\curl\curl.h:1553</i>
		 */
		public static final int CURLOPT_RTSP_REQUEST = 0 + 189;
		/**
		 * The RTSP session identifier<br>
		 * <i>native declaration : include\curl\curl.h:1556</i>
		 */
		public static final int CURLOPT_RTSP_SESSION_ID = 10000 + 190;
		/**
		 * The RTSP stream URI<br>
		 * <i>native declaration : include\curl\curl.h:1559</i>
		 */
		public static final int CURLOPT_RTSP_STREAM_URI = 10000 + 191;
		/**
		 * The Transport: header to use in RTSP requests<br>
		 * <i>native declaration : include\curl\curl.h:1562</i>
		 */
		public static final int CURLOPT_RTSP_TRANSPORT = 10000 + 192;
		/**
		 * Manually initialize the client RTSP CSeq for this handle<br>
		 * <i>native declaration : include\curl\curl.h:1565</i>
		 */
		public static final int CURLOPT_RTSP_CLIENT_CSEQ = 0 + 193;
		/**
		 * Manually initialize the server RTSP CSeq for this handle<br>
		 * <i>native declaration : include\curl\curl.h:1568</i>
		 */
		public static final int CURLOPT_RTSP_SERVER_CSEQ = 0 + 194;
		/**
		 * The stream to pass to INTERLEAVEFUNCTION.<br>
		 * <i>native declaration : include\curl\curl.h:1571</i>
		 */
		public static final int CURLOPT_INTERLEAVEDATA = 10000 + 195;
		/**
		 * Let the application define a custom write method for RTP data<br>
		 * <i>native declaration : include\curl\curl.h:1574</i>
		 */
		public static final int CURLOPT_INTERLEAVEFUNCTION = 20000 + 196;
		/**
		 * Turn on wildcard matching<br>
		 * <i>native declaration : include\curl\curl.h:1577</i>
		 */
		public static final int CURLOPT_WILDCARDMATCH = 0 + 197;
		/**
		 * Directory matching callback called before downloading of an<br>
		 * individual file (chunk) started<br>
		 * <i>native declaration : include\curl\curl.h:1581</i>
		 */
		public static final int CURLOPT_CHUNK_BGN_FUNCTION = 20000 + 198;
		/**
		 * Directory matching callback called after the file (chunk)<br>
		 * was downloaded, or skipped<br>
		 * <i>native declaration : include\curl\curl.h:1585</i>
		 */
		public static final int CURLOPT_CHUNK_END_FUNCTION = 20000 + 199;
		/**
		 * Change match (fnmatch-like) callback for wildcard matching<br>
		 * <i>native declaration : include\curl\curl.h:1588</i>
		 */
		public static final int CURLOPT_FNMATCH_FUNCTION = 20000 + 200;
		/**
		 * Let the application define custom chunk data pointer<br>
		 * <i>native declaration : include\curl\curl.h:1591</i>
		 */
		public static final int CURLOPT_CHUNK_DATA = 10000 + 201;
		/**
		 * FNMATCH_FUNCTION user pointer<br>
		 * <i>native declaration : include\curl\curl.h:1594</i>
		 */
		public static final int CURLOPT_FNMATCH_DATA = 10000 + 202;
		/**
		 * send linked-list of name:port:address sets<br>
		 * <i>native declaration : include\curl\curl.h:1597</i>
		 */
		public static final int CURLOPT_RESOLVE = 10000 + 203;
		/**
		 * Set a username for authenticated TLS<br>
		 * <i>native declaration : include\curl\curl.h:1600</i>
		 */
		public static final int CURLOPT_TLSAUTH_USERNAME = 10000 + 204;
		/**
		 * Set a password for authenticated TLS<br>
		 * <i>native declaration : include\curl\curl.h:1603</i>
		 */
		public static final int CURLOPT_TLSAUTH_PASSWORD = 10000 + 205;
		/**
		 * Set authentication type for authenticated TLS<br>
		 * <i>native declaration : include\curl\curl.h:1606</i>
		 */
		public static final int CURLOPT_TLSAUTH_TYPE = 10000 + 206;
		/**
		 * Set to 1 to enable the "TE:" header in HTTP requests to ask for<br>
		 * compressed transfer-encoded responses. Set to 0 to disable the use of TE:<br>
		 * in outgoing requests. The current default is 0, but it might change in a<br>
		 * future libcurl release.<br>
		 * libcurl will ask for the compressed methods it knows of, and if that<br>
		 * isn't any, it will not ask for transfer-encoding at all even if this<br>
		 * option is set to 1.<br>
		 * <i>native declaration : include\curl\curl.h:1618</i>
		 */
		public static final int CURLOPT_TRANSFER_ENCODING = 0 + 207;
		/**
		 * Callback function for closing socket (instead of close(2)). The callback<br>
		 * should have type curl_closesocket_callback<br>
		 * <i>native declaration : include\curl\curl.h:1622</i>
		 */
		public static final int CURLOPT_CLOSESOCKETFUNCTION = 20000 + 208;
		/** <i>native declaration : include\curl\curl.h:1623</i> */
		public static final int CURLOPT_CLOSESOCKETDATA = 10000 + 209;
		/**
		 * allow GSSAPI credential delegation<br>
		 * <i>native declaration : include\curl\curl.h:1626</i>
		 */
		public static final int CURLOPT_GSSAPI_DELEGATION = 0 + 210;
		/**
		 * Set the name servers to use for DNS resolution<br>
		 * <i>native declaration : include\curl\curl.h:1629</i>
		 */
		public static final int CURLOPT_DNS_SERVERS = 10000 + 211;
		/**
		 * Time-out accept operations (currently for FTP only) after this amount<br>
		 * of milliseconds.<br>
		 * <i>native declaration : include\curl\curl.h:1633</i>
		 */
		public static final int CURLOPT_ACCEPTTIMEOUT_MS = 0 + 212;
		/**
		 * Set TCP keepalive<br>
		 * <i>native declaration : include\curl\curl.h:1636</i>
		 */
		public static final int CURLOPT_TCP_KEEPALIVE = 0 + 213;
		/**
		 * non-universal keepalive knobs (Linux, AIX, HP-UX, more)<br>
		 * <i>native declaration : include\curl\curl.h:1639</i>
		 */
		public static final int CURLOPT_TCP_KEEPIDLE = 0 + 214;
		/** <i>native declaration : include\curl\curl.h:1640</i> */
		public static final int CURLOPT_TCP_KEEPINTVL = 0 + 215;
		/**
		 * Enable/disable specific SSL features with a bitmask, see CURLSSLOPT_*<br>
		 * <i>native declaration : include\curl\curl.h:1643</i>
		 */
		public static final int CURLOPT_SSL_OPTIONS = 0 + 216;
		/**
		 * Set the SMTP auth originator<br>
		 * <i>native declaration : include\curl\curl.h:1646</i>
		 */
		public static final int CURLOPT_MAIL_AUTH = 10000 + 217;
		/**
		 * Enable/disable SASL initial response<br>
		 * <i>native declaration : include\curl\curl.h:1649</i>
		 */
		public static final int CURLOPT_SASL_IR = 0 + 218;
		/**
		 * Function that will be called instead of the internal progress display<br>
		 * function. This function should be defined as the curl_xferinfo_callback<br>
		 * prototype defines. (Deprecates CURLOPT_PROGRESSFUNCTION)<br>
		 * <i>native declaration : include\curl\curl.h:1654</i>
		 */
		public static final int CURLOPT_XFERINFOFUNCTION = 20000 + 219;
		/**
		 * The XOAUTH2 bearer token<br>
		 * <i>native declaration : include\curl\curl.h:1657</i>
		 */
		public static final int CURLOPT_XOAUTH2_BEARER = 10000 + 220;
		/**
		 * Set the interface string to use as outgoing network<br>
		 * interface for DNS requests.<br>
		 * Only supported by the c-ares DNS backend<br>
		 * <i>native declaration : include\curl\curl.h:1662</i>
		 */
		public static final int CURLOPT_DNS_INTERFACE = 10000 + 221;
		/**
		 * Set the local IPv4 address to use for outgoing DNS requests.<br>
		 * Only supported by the c-ares DNS backend<br>
		 * <i>native declaration : include\curl\curl.h:1666</i>
		 */
		public static final int CURLOPT_DNS_LOCAL_IP4 = 10000 + 222;
		/**
		 * Set the local IPv6 address to use for outgoing DNS requests.<br>
		 * Only supported by the c-ares DNS backend<br>
		 * <i>native declaration : include\curl\curl.h:1670</i>
		 */
		public static final int CURLOPT_DNS_LOCAL_IP6 = 10000 + 223;
		/**
		 * Set authentication options directly<br>
		 * <i>native declaration : include\curl\curl.h:1673</i>
		 */
		public static final int CURLOPT_LOGIN_OPTIONS = 10000 + 224;
		/**
		 * Enable/disable TLS NPN extension (http2 over ssl might fail without)<br>
		 * <i>native declaration : include\curl\curl.h:1676</i>
		 */
		public static final int CURLOPT_SSL_ENABLE_NPN = 0 + 225;
		/**
		 * Enable/disable TLS ALPN extension (http2 over ssl might fail without)<br>
		 * <i>native declaration : include\curl\curl.h:1679</i>
		 */
		public static final int CURLOPT_SSL_ENABLE_ALPN = 0 + 226;
		/**
		 * Time to wait for a response to a HTTP request containing an<br>
		 * Expect: 100-continue header before sending the data anyway.<br>
		 * <i>native declaration : include\curl\curl.h:1683</i>
		 */
		public static final int CURLOPT_EXPECT_100_TIMEOUT_MS = 0 + 227;
		/**
		 * This points to a linked list of headers used for proxy requests only,<br>
		 * struct curl_slist kind<br>
		 * <i>native declaration : include\curl\curl.h:1687</i>
		 */
		public static final int CURLOPT_PROXYHEADER = 10000 + 228;
		/**
		 * Pass in a bitmask of "header options"<br>
		 * <i>native declaration : include\curl\curl.h:1690</i>
		 */
		public static final int CURLOPT_HEADEROPT = 0 + 229;
		/**
		 * The public key in DER form used to validate the peer public key<br>
		 * this option is used only if SSL_VERIFYPEER is true<br>
		 * <i>native declaration : include\curl\curl.h:1694</i>
		 */
		public static final int CURLOPT_PINNEDPUBLICKEY = 10000 + 230;
		/**
		 * Path to Unix domain socket<br>
		 * <i>native declaration : include\curl\curl.h:1697</i>
		 */
		public static final int CURLOPT_UNIX_SOCKET_PATH = 10000 + 231;
		/**
		 * Set if we should verify the certificate status.<br>
		 * <i>native declaration : include\curl\curl.h:1700</i>
		 */
		public static final int CURLOPT_SSL_VERIFYSTATUS = 0 + 232;
		/**
		 * Set if we should enable TLS false start.<br>
		 * <i>native declaration : include\curl\curl.h:1703</i>
		 */
		public static final int CURLOPT_SSL_FALSESTART = 0 + 233;
		/**
		 * Do not squash dot-dot sequences<br>
		 * <i>native declaration : include\curl\curl.h:1706</i>
		 */
		public static final int CURLOPT_PATH_AS_IS = 0 + 234;
		/**
		 * Proxy Service Name<br>
		 * <i>native declaration : include\curl\curl.h:1709</i>
		 */
		public static final int CURLOPT_PROXY_SERVICE_NAME = 10000 + 235;
		/**
		 * Service Name<br>
		 * <i>native declaration : include\curl\curl.h:1712</i>
		 */
		public static final int CURLOPT_SERVICE_NAME = 10000 + 236;
		/**
		 * Wait/don't wait for pipe/mutex to clarify<br>
		 * <i>native declaration : include\curl\curl.h:1715</i>
		 */
		public static final int CURLOPT_PIPEWAIT = 0 + 237;
		/**
		 * Set the protocol used when curl is given a URL without a protocol<br>
		 * <i>native declaration : include\curl\curl.h:1718</i>
		 */
		public static final int CURLOPT_DEFAULT_PROTOCOL = 10000 + 238;
		/**
		 * Set stream weight, 1 - 256 (default is 16)<br>
		 * <i>native declaration : include\curl\curl.h:1721</i>
		 */
		public static final int CURLOPT_STREAM_WEIGHT = 0 + 239;
		/**
		 * Set stream dependency on another CURL handle<br>
		 * <i>native declaration : include\curl\curl.h:1724</i>
		 */
		public static final int CURLOPT_STREAM_DEPENDS = 10000 + 240;
		/**
		 * Set E-xclusive stream dependency on another CURL handle<br>
		 * <i>native declaration : include\curl\curl.h:1727</i>
		 */
		public static final int CURLOPT_STREAM_DEPENDS_E = 10000 + 241;
		/**
		 * Do not send any tftp option requests to the server<br>
		 * <i>native declaration : include\curl\curl.h:1730</i>
		 */
		public static final int CURLOPT_TFTP_NO_OPTIONS = 0 + 242;
		/**
		 * Linked-list of host:port:connect-to-host:connect-to-port,<br>
		 * overrides the URL's host:port (only for the network layer)<br>
		 * <i>native declaration : include\curl\curl.h:1734</i>
		 */
		public static final int CURLOPT_CONNECT_TO = 10000 + 243;
		/**
		 * Set TCP Fast Open<br>
		 * <i>native declaration : include\curl\curl.h:1737</i>
		 */
		public static final int CURLOPT_TCP_FASTOPEN = 0 + 244;
		/**
		 * Continue to send data if the server responds early with an<br>
		 * HTTP status code >= 300<br>
		 * <i>native declaration : include\curl\curl.h:1741</i>
		 */
		public static final int CURLOPT_KEEP_SENDING_ON_ERROR = 0 + 245;
		/**
		 * The CApath or CAfile used to validate the proxy certificate<br>
		 * this option is used only if PROXY_SSL_VERIFYPEER is true<br>
		 * <i>native declaration : include\curl\curl.h:1745</i>
		 */
		public static final int CURLOPT_PROXY_CAINFO = 10000 + 246;
		/**
		 * The CApath directory used to validate the proxy certificate<br>
		 * this option is used only if PROXY_SSL_VERIFYPEER is true<br>
		 * <i>native declaration : include\curl\curl.h:1749</i>
		 */
		public static final int CURLOPT_PROXY_CAPATH = 10000 + 247;
		/**
		 * Set if we should verify the proxy in ssl handshake,<br>
		 * set 1 to verify.<br>
		 * <i>native declaration : include\curl\curl.h:1753</i>
		 */
		public static final int CURLOPT_PROXY_SSL_VERIFYPEER = 0 + 248;
		/**
		 * Set if we should verify the Common name from the proxy certificate in ssl<br>
		 * handshake, set 1 to check existence, 2 to ensure that it matches<br>
		 * the provided hostname.<br>
		 * <i>native declaration : include\curl\curl.h:1758</i>
		 */
		public static final int CURLOPT_PROXY_SSL_VERIFYHOST = 0 + 249;
		/**
		 * What version to specifically try to use for proxy.<br>
		 * See CURL_SSLVERSION defines below.<br>
		 * <i>native declaration : include\curl\curl.h:1762</i>
		 */
		public static final int CURLOPT_PROXY_SSLVERSION = 0 + 250;
		/**
		 * Set a username for authenticated TLS for proxy<br>
		 * <i>native declaration : include\curl\curl.h:1765</i>
		 */
		public static final int CURLOPT_PROXY_TLSAUTH_USERNAME = 10000 + 251;
		/**
		 * Set a password for authenticated TLS for proxy<br>
		 * <i>native declaration : include\curl\curl.h:1768</i>
		 */
		public static final int CURLOPT_PROXY_TLSAUTH_PASSWORD = 10000 + 252;
		/**
		 * Set authentication type for authenticated TLS for proxy<br>
		 * <i>native declaration : include\curl\curl.h:1771</i>
		 */
		public static final int CURLOPT_PROXY_TLSAUTH_TYPE = 10000 + 253;
		/**
		 * name of the file keeping your private SSL-certificate for proxy<br>
		 * <i>native declaration : include\curl\curl.h:1774</i>
		 */
		public static final int CURLOPT_PROXY_SSLCERT = 10000 + 254;
		/**
		 * type of the file keeping your SSL-certificate ("DER", "PEM", "ENG") for<br>
		 * proxy<br>
		 * <i>native declaration : include\curl\curl.h:1778</i>
		 */
		public static final int CURLOPT_PROXY_SSLCERTTYPE = 10000 + 255;
		/**
		 * name of the file keeping your private SSL-key for proxy<br>
		 * <i>native declaration : include\curl\curl.h:1781</i>
		 */
		public static final int CURLOPT_PROXY_SSLKEY = 10000 + 256;
		/**
		 * type of the file keeping your private SSL-key ("DER", "PEM", "ENG") for<br>
		 * proxy<br>
		 * <i>native declaration : include\curl\curl.h:1785</i>
		 */
		public static final int CURLOPT_PROXY_SSLKEYTYPE = 10000 + 257;
		/**
		 * password for the SSL private key for proxy<br>
		 * <i>native declaration : include\curl\curl.h:1788</i>
		 */
		public static final int CURLOPT_PROXY_KEYPASSWD = 10000 + 258;
		/**
		 * Specify which SSL ciphers to use for proxy<br>
		 * <i>native declaration : include\curl\curl.h:1791</i>
		 */
		public static final int CURLOPT_PROXY_SSL_CIPHER_LIST = 10000 + 259;
		/**
		 * CRL file for proxy<br>
		 * <i>native declaration : include\curl\curl.h:1794</i>
		 */
		public static final int CURLOPT_PROXY_CRLFILE = 10000 + 260;
		/**
		 * Enable/disable specific SSL features with a bitmask for proxy, see<br>
		 * CURLSSLOPT_*<br>
		 * <i>native declaration : include\curl\curl.h:1798</i>
		 */
		public static final int CURLOPT_PROXY_SSL_OPTIONS = 0 + 261;
		/**
		 * Name of pre proxy to use.<br>
		 * <i>native declaration : include\curl\curl.h:1801</i>
		 */
		public static final int CURLOPT_PRE_PROXY = 10000 + 262;
		/**
		 * The public key in DER form used to validate the proxy public key<br>
		 * this option is used only if PROXY_SSL_VERIFYPEER is true<br>
		 * <i>native declaration : include\curl\curl.h:1805</i>
		 */
		public static final int CURLOPT_PROXY_PINNEDPUBLICKEY = 10000 + 263;
		/**
		 * Path to an abstract Unix domain socket<br>
		 * <i>native declaration : include\curl\curl.h:1808</i>
		 */
		public static final int CURLOPT_ABSTRACT_UNIX_SOCKET = 10000 + 264;
		/**
		 * Suppress proxy CONNECT response headers from user callbacks<br>
		 * <i>native declaration : include\curl\curl.h:1811</i>
		 */
		public static final int CURLOPT_SUPPRESS_CONNECT_HEADERS = 0 + 265;
		/**
		 * The request target, instead of extracted from the URL<br>
		 * <i>native declaration : include\curl\curl.h:1814</i>
		 */
		public static final int CURLOPT_REQUEST_TARGET = 10000 + 266;
		/**
		 * bitmask of allowed auth methods for connections to SOCKS5 proxies<br>
		 * <i>native declaration : include\curl\curl.h:1817</i>
		 */
		public static final int CURLOPT_SOCKS5_AUTH = 0 + 267;
		/**
		 * Enable/disable SSH compression<br>
		 * <i>native declaration : include\curl\curl.h:1820</i>
		 */
		public static final int CURLOPT_SSH_COMPRESSION = 0 + 268;
		/**
		 * Post MIME data.<br>
		 * <i>native declaration : include\curl\curl.h:1823</i>
		 */
		public static final int CURLOPT_MIMEPOST = 10000 + 269;
		/**
		 * Time to use with the CURLOPT_TIMECONDITION. Specified in number of<br>
		 * seconds since 1 Jan 1970.<br>
		 * <i>native declaration : include\curl\curl.h:1827</i>
		 */
		public static final int CURLOPT_TIMEVALUE_LARGE = 30000 + 270;
		/**
		 * Head start in milliseconds to give happy eyeballs.<br>
		 * <i>native declaration : include\curl\curl.h:1830</i>
		 */
		public static final int CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS = 0 + 271;
		/**
		 * Function that will be called before a resolver request is made<br>
		 * <i>native declaration : include\curl\curl.h:1833</i>
		 */
		public static final int CURLOPT_RESOLVER_START_FUNCTION = 20000 + 272;
		/**
		 * User data to pass to the resolver start callback.<br>
		 * <i>native declaration : include\curl\curl.h:1836</i>
		 */
		public static final int CURLOPT_RESOLVER_START_DATA = 10000 + 273;
		/**
		 * send HAProxy PROXY protocol header?<br>
		 * <i>native declaration : include\curl\curl.h:1839</i>
		 */
		public static final int CURLOPT_HAPROXYPROTOCOL = 0 + 274;
		/**
		 * shuffle addresses before use when DNS returns multiple<br>
		 * <i>native declaration : include\curl\curl.h:1842</i>
		 */
		public static final int CURLOPT_DNS_SHUFFLE_ADDRESSES = 0 + 275;
		/**
		 * Specify which TLS 1.3 ciphers suites to use<br>
		 * <i>native declaration : include\curl\curl.h:1845</i>
		 */
		public static final int CURLOPT_TLS13_CIPHERS = 10000 + 276;
		/** <i>native declaration : include\curl\curl.h:1846</i> */
		public static final int CURLOPT_PROXY_TLS13_CIPHERS = 10000 + 277;
		/**
		 * Disallow specifying username/login in URL.<br>
		 * <i>native declaration : include\curl\curl.h:1849</i>
		 */
		public static final int CURLOPT_DISALLOW_USERNAME_IN_URL = 0 + 278;
		/**
		 * DNS-over-HTTPS URL<br>
		 * <i>native declaration : include\curl\curl.h:1852</i>
		 */
		public static final int CURLOPT_DOH_URL = 10000 + 279;
		/**
		 * Preferred buffer size to use for uploads<br>
		 * <i>native declaration : include\curl\curl.h:1855</i>
		 */
		public static final int CURLOPT_UPLOAD_BUFFERSIZE = 0 + 280;
		/**
		 * Time in ms between connection upkeep calls for long-lived connections.<br>
		 * <i>native declaration : include\curl\curl.h:1858</i>
		 */
		public static final int CURLOPT_UPKEEP_INTERVAL_MS = 0 + 281;
		/**
		 * Specify URL using CURL URL API.<br>
		 * <i>native declaration : include\curl\curl.h:1861</i>
		 */
		public static final int CURLOPT_CURLU = 10000 + 282;
		/**
		 * add trailing data just after no more data is available<br>
		 * <i>native declaration : include\curl\curl.h:1864</i>
		 */
		public static final int CURLOPT_TRAILERFUNCTION = 20000 + 283;
		/**
		 * pointer to be passed to HTTP_TRAILER_FUNCTION<br>
		 * <i>native declaration : include\curl\curl.h:1867</i>
		 */
		public static final int CURLOPT_TRAILERDATA = 10000 + 284;
		/**
		 * set this to 1L to allow HTTP/0.9 responses or 0L to disallow<br>
		 * <i>native declaration : include\curl\curl.h:1870</i>
		 */
		public static final int CURLOPT_HTTP09_ALLOWED = 0 + 285;
		/**
		 * alt-svc control bitmask<br>
		 * <i>native declaration : include\curl\curl.h:1873</i>
		 */
		public static final int CURLOPT_ALTSVC_CTRL = 0 + 286;
		/**
		 * alt-svc cache file name to possibly read from/write to<br>
		 * <i>native declaration : include\curl\curl.h:1876</i>
		 */
		public static final int CURLOPT_ALTSVC = 10000 + 287;
		/**
		 * maximum age of a connection to consider it for reuse (in seconds)<br>
		 * <i>native declaration : include\curl\curl.h:1879</i>
		 */
		public static final int CURLOPT_MAXAGE_CONN = 0 + 288;
		/**
		 * SASL authorisation identity<br>
		 * <i>native declaration : include\curl\curl.h:1882</i>
		 */
		public static final int CURLOPT_SASL_AUTHZID = 10000 + 289;
		/**
		 * allow RCPT TO command to fail for some recipients<br>
		 * <i>native declaration : include\curl\curl.h:1885</i>
		 */
		public static final int CURLOPT_MAIL_RCPT_ALLLOWFAILS = 0 + 290;
		/**
		 * the last unused<br>
		 * <i>native declaration : include\curl\curl.h:1887</i>
		 */
		public static final int CURLOPT_LASTENTRY = (0 + 290 + 1);
	};
	/**
	 * setting this means we don't care, and that we'd<br>
	 * like the library to choose the best possible<br>
	 * for us!
	 */
	public static final int CURL_HTTP_VERSION_NONE = 0;
	/** please use HTTP 1.0 in the request */
	public static final int CURL_HTTP_VERSION_1_0 = 1;
	/** please use HTTP 1.1 in the request */
	public static final int CURL_HTTP_VERSION_1_1 = 2;
	/** please use HTTP 2 in the request */
	public static final int CURL_HTTP_VERSION_2_0 = 3;
	/** use version 2 for HTTPS, version 1.1 for HTTP */
	public static final int CURL_HTTP_VERSION_2TLS = 4;
	/**
	 * please use HTTP 2 without HTTP/1.1<br>
	 * Upgrade
	 */
	public static final int CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE = 5;
	/**
	 * Makes use of explicit HTTP/3 without fallback.<br>
	 * Use CURLOPT_ALTSVC to enable HTTP/3 upgrade
	 */
	public static final int CURL_HTTP_VERSION_3 = 30;
	/** *ILLEGAL* http version */
	public static final int CURL_HTTP_VERSION_LAST = 31;
	/** first in list */
	public static final int CURL_RTSPREQ_NONE = 0;
	public static final int CURL_RTSPREQ_OPTIONS = 1;
	public static final int CURL_RTSPREQ_DESCRIBE = 2;
	public static final int CURL_RTSPREQ_ANNOUNCE = 3;
	public static final int CURL_RTSPREQ_SETUP = 4;
	public static final int CURL_RTSPREQ_PLAY = 5;
	public static final int CURL_RTSPREQ_PAUSE = 6;
	public static final int CURL_RTSPREQ_TEARDOWN = 7;
	public static final int CURL_RTSPREQ_GET_PARAMETER = 8;
	public static final int CURL_RTSPREQ_SET_PARAMETER = 9;
	public static final int CURL_RTSPREQ_RECORD = 10;
	public static final int CURL_RTSPREQ_RECEIVE = 11;
	/** last in list */
	public static final int CURL_RTSPREQ_LAST = 12;
	/**
	 * These enums are for use with the CURLOPT_NETRC option.<br>
	 * <i>native declaration : include\curl\curl.h:1968</i><br>
	 * enum values
	 */
	public static interface CURL_NETRC_OPTION {
		/**
		 * The .netrc will never be read.<br>
		 * This is the default.<br>
		 * <i>native declaration : include\curl\curl.h:1969</i>
		 */
		public static final int CURL_NETRC_IGNORED = 0;
		/**
		 * A user:password in the URL will be preferred<br>
		 * to one in the .netrc.<br>
		 * <i>native declaration : include\curl\curl.h:1971</i>
		 */
		public static final int CURL_NETRC_OPTIONAL = 1;
		/**
		 * A user:password in the URL will be ignored.<br>
		 * Unless one is set programmatically, the .netrc<br>
		 * will be queried.<br>
		 * <i>native declaration : include\curl\curl.h:1973</i>
		 */
		public static final int CURL_NETRC_REQUIRED = 2;
		/** <i>native declaration : include\curl\curl.h:1976</i> */
		public static final int CURL_NETRC_LAST = 3;
	};
	public static final int CURL_SSLVERSION_DEFAULT = 0;
	/** TLS 1.x */
	public static final int CURL_SSLVERSION_TLSv1 = 1;
	public static final int CURL_SSLVERSION_SSLv2 = 2;
	public static final int CURL_SSLVERSION_SSLv3 = 3;
	public static final int CURL_SSLVERSION_TLSv1_0 = 4;
	public static final int CURL_SSLVERSION_TLSv1_1 = 5;
	public static final int CURL_SSLVERSION_TLSv1_2 = 6;
	public static final int CURL_SSLVERSION_TLSv1_3 = 7;
	/** never use, keep last */
	public static final int CURL_SSLVERSION_LAST = 8;
	public static final int CURL_SSLVERSION_MAX_NONE = 0;
	public static final int CURL_SSLVERSION_MAX_DEFAULT = ((int)Libcurl4Library.CURL_SSLVERSION_TLSv1 << 16);
	public static final int CURL_SSLVERSION_MAX_TLSv1_0 = ((int)Libcurl4Library.CURL_SSLVERSION_TLSv1_0 << 16);
	public static final int CURL_SSLVERSION_MAX_TLSv1_1 = ((int)Libcurl4Library.CURL_SSLVERSION_TLSv1_1 << 16);
	public static final int CURL_SSLVERSION_MAX_TLSv1_2 = ((int)Libcurl4Library.CURL_SSLVERSION_TLSv1_2 << 16);
	public static final int CURL_SSLVERSION_MAX_TLSv1_3 = ((int)Libcurl4Library.CURL_SSLVERSION_TLSv1_3 << 16);
	/** never use, keep last */
	public static final int CURL_SSLVERSION_MAX_LAST = ((int)Libcurl4Library.CURL_SSLVERSION_LAST << 16);
	/**
	 * <i>native declaration : include\curl\curl.h:2004</i><br>
	 * enum values
	 */
	public static interface CURL_TLSAUTH {
		/** <i>native declaration : include\curl\curl.h:2005</i> */
		public static final int CURL_TLSAUTH_NONE = 0;
		/** <i>native declaration : include\curl\curl.h:2006</i> */
		public static final int CURL_TLSAUTH_SRP = 1;
		/**
		 * never use, keep last<br>
		 * <i>native declaration : include\curl\curl.h:2007</i>
		 */
		public static final int CURL_TLSAUTH_LAST = 2;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_TimeCond {
		/** <i>native declaration : include\curl\curl.h:2023</i> */
		public static final int CURL_TIMECOND_NONE = 0;
		/** <i>native declaration : include\curl\curl.h:2025</i> */
		public static final int CURL_TIMECOND_IFMODSINCE = 1;
		/** <i>native declaration : include\curl\curl.h:2026</i> */
		public static final int CURL_TIMECOND_IFUNMODSINCE = 2;
		/** <i>native declaration : include\curl\curl.h:2027</i> */
		public static final int CURL_TIMECOND_LASTMOD = 3;
		/** <i>native declaration : include\curl\curl.h:2029</i> */
		public static final int CURL_TIMECOND_LAST = 4;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface CURLformoption {
		/**
		 * the first one is unused ***********<br>
		 * <i>native declaration : include\curl\curl.h:2166</i>
		 */
		public static final int CURLFORM_NOTHING = 0;
		/** <i>native declaration : include\curl\curl.h:2167</i> */
		public static final int CURLFORM_COPYNAME = 1;
		/** <i>native declaration : include\curl\curl.h:2168</i> */
		public static final int CURLFORM_PTRNAME = 2;
		/** <i>native declaration : include\curl\curl.h:2169</i> */
		public static final int CURLFORM_NAMELENGTH = 3;
		/** <i>native declaration : include\curl\curl.h:2170</i> */
		public static final int CURLFORM_COPYCONTENTS = 4;
		/** <i>native declaration : include\curl\curl.h:2171</i> */
		public static final int CURLFORM_PTRCONTENTS = 5;
		/** <i>native declaration : include\curl\curl.h:2172</i> */
		public static final int CURLFORM_CONTENTSLENGTH = 6;
		/** <i>native declaration : include\curl\curl.h:2173</i> */
		public static final int CURLFORM_FILECONTENT = 7;
		/** <i>native declaration : include\curl\curl.h:2174</i> */
		public static final int CURLFORM_ARRAY = 8;
		/** <i>native declaration : include\curl\curl.h:2175</i> */
		public static final int CURLFORM_OBSOLETE = 9;
		/** <i>native declaration : include\curl\curl.h:2176</i> */
		public static final int CURLFORM_FILE = 10;
		/** <i>native declaration : include\curl\curl.h:2178</i> */
		public static final int CURLFORM_BUFFER = 11;
		/** <i>native declaration : include\curl\curl.h:2179</i> */
		public static final int CURLFORM_BUFFERPTR = 12;
		/** <i>native declaration : include\curl\curl.h:2180</i> */
		public static final int CURLFORM_BUFFERLENGTH = 13;
		/** <i>native declaration : include\curl\curl.h:2182</i> */
		public static final int CURLFORM_CONTENTTYPE = 14;
		/** <i>native declaration : include\curl\curl.h:2183</i> */
		public static final int CURLFORM_CONTENTHEADER = 15;
		/** <i>native declaration : include\curl\curl.h:2184</i> */
		public static final int CURLFORM_FILENAME = 16;
		/** <i>native declaration : include\curl\curl.h:2185</i> */
		public static final int CURLFORM_END = 17;
		/** <i>native declaration : include\curl\curl.h:2186</i> */
		public static final int CURLFORM_OBSOLETE2 = 18;
		/** <i>native declaration : include\curl\curl.h:2188</i> */
		public static final int CURLFORM_STREAM = 19;
		/**
		 * added in 7.46.0, provide a curl_off_t length<br>
		 * <i>native declaration : include\curl\curl.h:2189</i>
		 */
		public static final int CURLFORM_CONTENTLEN = 20;
		/**
		 * the last unused<br>
		 * <i>native declaration : include\curl\curl.h:2191</i>
		 */
		public static final int CURLFORM_LASTENTRY = 21;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface CURLFORMcode {
		/**
		 * first, no error<br>
		 * <i>native declaration : include\curl\curl.h:2217</i>
		 */
		public static final int CURL_FORMADD_OK = 0;
		/** <i>native declaration : include\curl\curl.h:2219</i> */
		public static final int CURL_FORMADD_MEMORY = 1;
		/** <i>native declaration : include\curl\curl.h:2220</i> */
		public static final int CURL_FORMADD_OPTION_TWICE = 2;
		/** <i>native declaration : include\curl\curl.h:2221</i> */
		public static final int CURL_FORMADD_NULL = 3;
		/** <i>native declaration : include\curl\curl.h:2222</i> */
		public static final int CURL_FORMADD_UNKNOWN_OPTION = 4;
		/** <i>native declaration : include\curl\curl.h:2223</i> */
		public static final int CURL_FORMADD_INCOMPLETE = 5;
		/** <i>native declaration : include\curl\curl.h:2224</i> */
		public static final int CURL_FORMADD_ILLEGAL_ARRAY = 6;
		/**
		 * libcurl was built with this disabled<br>
		 * <i>native declaration : include\curl\curl.h:2225</i>
		 */
		public static final int CURL_FORMADD_DISABLED = 7;
		/**
		 * last<br>
		 * <i>native declaration : include\curl\curl.h:2227</i>
		 */
		public static final int CURL_FORMADD_LAST = 8;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface CURLsslset {
		/** <i>native declaration : include\curl\curl.h:2422</i> */
		public static final int CURLSSLSET_OK = 0;
		/** <i>native declaration : include\curl\curl.h:2423</i> */
		public static final int CURLSSLSET_UNKNOWN_BACKEND = 1;
		/** <i>native declaration : include\curl\curl.h:2424</i> */
		public static final int CURLSSLSET_TOO_LATE = 2;
		/**
		 * libcurl was built without any SSL support<br>
		 * <i>native declaration : include\curl\curl.h:2425</i>
		 */
		public static final int CURLSSLSET_NO_BACKENDS = 3;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface CURLINFO {
		/**
		 * first, never use this<br>
		 * <i>native declaration : include\curl\curl.h:2490</i>
		 */
		public static final int CURLINFO_NONE = 0;
		/** <i>native declaration : include\curl\curl.h:2491</i> */
		public static final int CURLINFO_EFFECTIVE_URL = 0x100000 + 1;
		/** <i>native declaration : include\curl\curl.h:2492</i> */
		public static final int CURLINFO_RESPONSE_CODE = 0x200000 + 2;
		/** <i>native declaration : include\curl\curl.h:2493</i> */
		public static final int CURLINFO_TOTAL_TIME = 0x300000 + 3;
		/** <i>native declaration : include\curl\curl.h:2494</i> */
		public static final int CURLINFO_NAMELOOKUP_TIME = 0x300000 + 4;
		/** <i>native declaration : include\curl\curl.h:2495</i> */
		public static final int CURLINFO_CONNECT_TIME = 0x300000 + 5;
		/** <i>native declaration : include\curl\curl.h:2496</i> */
		public static final int CURLINFO_PRETRANSFER_TIME = 0x300000 + 6;
		/** <i>native declaration : include\curl\curl.h:2497</i> */
		public static final int CURLINFO_SIZE_UPLOAD = 0x300000 + 7;
		/** <i>native declaration : include\curl\curl.h:2498</i> */
		public static final int CURLINFO_SIZE_UPLOAD_T = 0x600000 + 7;
		/** <i>native declaration : include\curl\curl.h:2499</i> */
		public static final int CURLINFO_SIZE_DOWNLOAD = 0x300000 + 8;
		/** <i>native declaration : include\curl\curl.h:2500</i> */
		public static final int CURLINFO_SIZE_DOWNLOAD_T = 0x600000 + 8;
		/** <i>native declaration : include\curl\curl.h:2501</i> */
		public static final int CURLINFO_SPEED_DOWNLOAD = 0x300000 + 9;
		/** <i>native declaration : include\curl\curl.h:2502</i> */
		public static final int CURLINFO_SPEED_DOWNLOAD_T = 0x600000 + 9;
		/** <i>native declaration : include\curl\curl.h:2503</i> */
		public static final int CURLINFO_SPEED_UPLOAD = 0x300000 + 10;
		/** <i>native declaration : include\curl\curl.h:2504</i> */
		public static final int CURLINFO_SPEED_UPLOAD_T = 0x600000 + 10;
		/** <i>native declaration : include\curl\curl.h:2505</i> */
		public static final int CURLINFO_HEADER_SIZE = 0x200000 + 11;
		/** <i>native declaration : include\curl\curl.h:2506</i> */
		public static final int CURLINFO_REQUEST_SIZE = 0x200000 + 12;
		/** <i>native declaration : include\curl\curl.h:2507</i> */
		public static final int CURLINFO_SSL_VERIFYRESULT = 0x200000 + 13;
		/** <i>native declaration : include\curl\curl.h:2508</i> */
		public static final int CURLINFO_FILETIME = 0x200000 + 14;
		/** <i>native declaration : include\curl\curl.h:2509</i> */
		public static final int CURLINFO_FILETIME_T = 0x600000 + 14;
		/** <i>native declaration : include\curl\curl.h:2510</i> */
		public static final int CURLINFO_CONTENT_LENGTH_DOWNLOAD = 0x300000 + 15;
		/** <i>native declaration : include\curl\curl.h:2511</i> */
		public static final int CURLINFO_CONTENT_LENGTH_DOWNLOAD_T = 0x600000 + 15;
		/** <i>native declaration : include\curl\curl.h:2512</i> */
		public static final int CURLINFO_CONTENT_LENGTH_UPLOAD = 0x300000 + 16;
		/** <i>native declaration : include\curl\curl.h:2513</i> */
		public static final int CURLINFO_CONTENT_LENGTH_UPLOAD_T = 0x600000 + 16;
		/** <i>native declaration : include\curl\curl.h:2514</i> */
		public static final int CURLINFO_STARTTRANSFER_TIME = 0x300000 + 17;
		/** <i>native declaration : include\curl\curl.h:2515</i> */
		public static final int CURLINFO_CONTENT_TYPE = 0x100000 + 18;
		/** <i>native declaration : include\curl\curl.h:2516</i> */
		public static final int CURLINFO_REDIRECT_TIME = 0x300000 + 19;
		/** <i>native declaration : include\curl\curl.h:2517</i> */
		public static final int CURLINFO_REDIRECT_COUNT = 0x200000 + 20;
		/** <i>native declaration : include\curl\curl.h:2518</i> */
		public static final int CURLINFO_PRIVATE = 0x100000 + 21;
		/** <i>native declaration : include\curl\curl.h:2519</i> */
		public static final int CURLINFO_HTTP_CONNECTCODE = 0x200000 + 22;
		/** <i>native declaration : include\curl\curl.h:2520</i> */
		public static final int CURLINFO_HTTPAUTH_AVAIL = 0x200000 + 23;
		/** <i>native declaration : include\curl\curl.h:2521</i> */
		public static final int CURLINFO_PROXYAUTH_AVAIL = 0x200000 + 24;
		/** <i>native declaration : include\curl\curl.h:2522</i> */
		public static final int CURLINFO_OS_ERRNO = 0x200000 + 25;
		/** <i>native declaration : include\curl\curl.h:2523</i> */
		public static final int CURLINFO_NUM_CONNECTS = 0x200000 + 26;
		/** <i>native declaration : include\curl\curl.h:2524</i> */
		public static final int CURLINFO_SSL_ENGINES = 0x400000 + 27;
		/** <i>native declaration : include\curl\curl.h:2525</i> */
		public static final int CURLINFO_COOKIELIST = 0x400000 + 28;
		/** <i>native declaration : include\curl\curl.h:2526</i> */
		public static final int CURLINFO_LASTSOCKET = 0x200000 + 29;
		/** <i>native declaration : include\curl\curl.h:2527</i> */
		public static final int CURLINFO_FTP_ENTRY_PATH = 0x100000 + 30;
		/** <i>native declaration : include\curl\curl.h:2528</i> */
		public static final int CURLINFO_REDIRECT_URL = 0x100000 + 31;
		/** <i>native declaration : include\curl\curl.h:2529</i> */
		public static final int CURLINFO_PRIMARY_IP = 0x100000 + 32;
		/** <i>native declaration : include\curl\curl.h:2530</i> */
		public static final int CURLINFO_APPCONNECT_TIME = 0x300000 + 33;
		/** <i>native declaration : include\curl\curl.h:2531</i> */
		public static final int CURLINFO_CERTINFO = 0x400000 + 34;
		/** <i>native declaration : include\curl\curl.h:2532</i> */
		public static final int CURLINFO_CONDITION_UNMET = 0x200000 + 35;
		/** <i>native declaration : include\curl\curl.h:2533</i> */
		public static final int CURLINFO_RTSP_SESSION_ID = 0x100000 + 36;
		/** <i>native declaration : include\curl\curl.h:2534</i> */
		public static final int CURLINFO_RTSP_CLIENT_CSEQ = 0x200000 + 37;
		/** <i>native declaration : include\curl\curl.h:2535</i> */
		public static final int CURLINFO_RTSP_SERVER_CSEQ = 0x200000 + 38;
		/** <i>native declaration : include\curl\curl.h:2536</i> */
		public static final int CURLINFO_RTSP_CSEQ_RECV = 0x200000 + 39;
		/** <i>native declaration : include\curl\curl.h:2537</i> */
		public static final int CURLINFO_PRIMARY_PORT = 0x200000 + 40;
		/** <i>native declaration : include\curl\curl.h:2538</i> */
		public static final int CURLINFO_LOCAL_IP = 0x100000 + 41;
		/** <i>native declaration : include\curl\curl.h:2539</i> */
		public static final int CURLINFO_LOCAL_PORT = 0x200000 + 42;
		/** <i>native declaration : include\curl\curl.h:2540</i> */
		public static final int CURLINFO_TLS_SESSION = 0x400000 + 43;
		/** <i>native declaration : include\curl\curl.h:2541</i> */
		public static final int CURLINFO_ACTIVESOCKET = 0x500000 + 44;
		/** <i>native declaration : include\curl\curl.h:2542</i> */
		public static final int CURLINFO_TLS_SSL_PTR = 0x400000 + 45;
		/** <i>native declaration : include\curl\curl.h:2543</i> */
		public static final int CURLINFO_HTTP_VERSION = 0x200000 + 46;
		/** <i>native declaration : include\curl\curl.h:2544</i> */
		public static final int CURLINFO_PROXY_SSL_VERIFYRESULT = 0x200000 + 47;
		/** <i>native declaration : include\curl\curl.h:2545</i> */
		public static final int CURLINFO_PROTOCOL = 0x200000 + 48;
		/** <i>native declaration : include\curl\curl.h:2546</i> */
		public static final int CURLINFO_SCHEME = 0x100000 + 49;
		/**
		 * Preferably these would be defined conditionally based on the<br>
		 * sizeof curl_off_t being 64-bits<br>
		 * <i>native declaration : include\curl\curl.h:2551</i>
		 */
		public static final int CURLINFO_TOTAL_TIME_T = 0x600000 + 50;
		/** <i>native declaration : include\curl\curl.h:2552</i> */
		public static final int CURLINFO_NAMELOOKUP_TIME_T = 0x600000 + 51;
		/** <i>native declaration : include\curl\curl.h:2553</i> */
		public static final int CURLINFO_CONNECT_TIME_T = 0x600000 + 52;
		/** <i>native declaration : include\curl\curl.h:2554</i> */
		public static final int CURLINFO_PRETRANSFER_TIME_T = 0x600000 + 53;
		/** <i>native declaration : include\curl\curl.h:2555</i> */
		public static final int CURLINFO_STARTTRANSFER_TIME_T = 0x600000 + 54;
		/** <i>native declaration : include\curl\curl.h:2556</i> */
		public static final int CURLINFO_REDIRECT_TIME_T = 0x600000 + 55;
		/** <i>native declaration : include\curl\curl.h:2557</i> */
		public static final int CURLINFO_APPCONNECT_TIME_T = 0x600000 + 56;
		/** <i>native declaration : include\curl\curl.h:2558</i> */
		public static final int CURLINFO_RETRY_AFTER = 0x600000 + 57;
		/** <i>native declaration : include\curl\curl.h:2560</i> */
		public static final int CURLINFO_LASTONE = 57;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_closepolicy {
		/**
		 * first, never use this<br>
		 * <i>native declaration : include\curl\curl.h:2568</i>
		 */
		public static final int CURLCLOSEPOLICY_NONE = 0;
		/** <i>native declaration : include\curl\curl.h:2570</i> */
		public static final int CURLCLOSEPOLICY_OLDEST = 1;
		/** <i>native declaration : include\curl\curl.h:2571</i> */
		public static final int CURLCLOSEPOLICY_LEAST_RECENTLY_USED = 2;
		/** <i>native declaration : include\curl\curl.h:2572</i> */
		public static final int CURLCLOSEPOLICY_LEAST_TRAFFIC = 3;
		/** <i>native declaration : include\curl\curl.h:2573</i> */
		public static final int CURLCLOSEPOLICY_SLOWEST = 4;
		/** <i>native declaration : include\curl\curl.h:2574</i> */
		public static final int CURLCLOSEPOLICY_CALLBACK = 5;
		/**
		 * last, never use this<br>
		 * <i>native declaration : include\curl\curl.h:2576</i>
		 */
		public static final int CURLCLOSEPOLICY_LAST = 6;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_lock_data {
		/** <i>native declaration : include\curl\curl.h:2593</i> */
		public static final int CURL_LOCK_DATA_NONE = 0;
		/**
		 * CURL_LOCK_DATA_SHARE is used internally to say that<br>
		 *  the locking is just made to change the internal state of the share<br>
		 *  itself.<br>
		 * <i>native declaration : include\curl\curl.h:2598</i>
		 */
		public static final int CURL_LOCK_DATA_SHARE = 1;
		/** <i>native declaration : include\curl\curl.h:2599</i> */
		public static final int CURL_LOCK_DATA_COOKIE = 2;
		/** <i>native declaration : include\curl\curl.h:2600</i> */
		public static final int CURL_LOCK_DATA_DNS = 3;
		/** <i>native declaration : include\curl\curl.h:2601</i> */
		public static final int CURL_LOCK_DATA_SSL_SESSION = 4;
		/** <i>native declaration : include\curl\curl.h:2602</i> */
		public static final int CURL_LOCK_DATA_CONNECT = 5;
		/** <i>native declaration : include\curl\curl.h:2603</i> */
		public static final int CURL_LOCK_DATA_PSL = 6;
		/** <i>native declaration : include\curl\curl.h:2604</i> */
		public static final int CURL_LOCK_DATA_LAST = 7;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface curl_lock_access {
		/**
		 * unspecified action<br>
		 * <i>native declaration : include\curl\curl.h:2609</i>
		 */
		public static final int CURL_LOCK_ACCESS_NONE = 0;
		/**
		 * for read perhaps<br>
		 * <i>native declaration : include\curl\curl.h:2610</i>
		 */
		public static final int CURL_LOCK_ACCESS_SHARED = 1;
		/**
		 * for write perhaps<br>
		 * <i>native declaration : include\curl\curl.h:2611</i>
		 */
		public static final int CURL_LOCK_ACCESS_SINGLE = 2;
		/**
		 * never use<br>
		 * <i>native declaration : include\curl\curl.h:2612</i>
		 */
		public static final int CURL_LOCK_ACCESS_LAST = 3;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface CURLSHcode {
		/**
		 * all is fine<br>
		 * <i>native declaration : include\curl\curl.h:2625</i>
		 */
		public static final int CURLSHE_OK = 0;
		/**
		 * 1<br>
		 * <i>native declaration : include\curl\curl.h:2626</i>
		 */
		public static final int CURLSHE_BAD_OPTION = 1;
		/**
		 * 2<br>
		 * <i>native declaration : include\curl\curl.h:2627</i>
		 */
		public static final int CURLSHE_IN_USE = 2;
		/**
		 * 3<br>
		 * <i>native declaration : include\curl\curl.h:2628</i>
		 */
		public static final int CURLSHE_INVALID = 3;
		/**
		 * 4 out of memory<br>
		 * <i>native declaration : include\curl\curl.h:2629</i>
		 */
		public static final int CURLSHE_NOMEM = 4;
		/**
		 * 5 feature not present in lib<br>
		 * <i>native declaration : include\curl\curl.h:2630</i>
		 */
		public static final int CURLSHE_NOT_BUILT_IN = 5;
		/**
		 * never use<br>
		 * <i>native declaration : include\curl\curl.h:2631</i>
		 */
		public static final int CURLSHE_LAST = 6;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface CURLSHoption {
		/**
		 * don't use<br>
		 * <i>native declaration : include\curl\curl.h:2635</i>
		 */
		public static final int CURLSHOPT_NONE = 0;
		/**
		 * specify a data type to share<br>
		 * <i>native declaration : include\curl\curl.h:2636</i>
		 */
		public static final int CURLSHOPT_SHARE = 1;
		/**
		 * specify which data type to stop sharing<br>
		 * <i>native declaration : include\curl\curl.h:2637</i>
		 */
		public static final int CURLSHOPT_UNSHARE = 2;
		/**
		 * pass in a 'curl_lock_function' pointer<br>
		 * <i>native declaration : include\curl\curl.h:2638</i>
		 */
		public static final int CURLSHOPT_LOCKFUNC = 3;
		/**
		 * pass in a 'curl_unlock_function' pointer<br>
		 * <i>native declaration : include\curl\curl.h:2639</i>
		 */
		public static final int CURLSHOPT_UNLOCKFUNC = 4;
		/**
		 * pass in a user data pointer used in the lock/unlock<br>
		 * callback functions<br>
		 * <i>native declaration : include\curl\curl.h:2640</i>
		 */
		public static final int CURLSHOPT_USERDATA = 5;
		/**
		 * never use<br>
		 * <i>native declaration : include\curl\curl.h:2642</i>
		 */
		public static final int CURLSHOPT_LAST = 6;
	};
	/**
	 * <i>native declaration : include\curl\curl.h</i><br>
	 * enum values
	 */
	public static interface CURLversion {
		/** <i>native declaration : include\curl\curl.h:2654</i> */
		public static final int CURLVERSION_FIRST = 0;
		/** <i>native declaration : include\curl\curl.h:2655</i> */
		public static final int CURLVERSION_SECOND = 1;
		/** <i>native declaration : include\curl\curl.h:2656</i> */
		public static final int CURLVERSION_THIRD = 2;
		/** <i>native declaration : include\curl\curl.h:2657</i> */
		public static final int CURLVERSION_FOURTH = 3;
		/** <i>native declaration : include\curl\curl.h:2658</i> */
		public static final int CURLVERSION_FIFTH = 4;
		/** <i>native declaration : include\curl\curl.h:2659</i> */
		public static final int CURLVERSION_SIXTH = 5;
		/** <i>native declaration : include\curl\curl.h:2660</i> */
		public static final int CURLVERSION_SEVENTH = 6;
		/**
		 * never actually use this<br>
		 * <i>native declaration : include\curl\curl.h:2661</i>
		 */
		public static final int CURLVERSION_LAST = 7;
	};
	/**
	 * <i>native declaration : include\curl\multi.h</i><br>
	 * enum values
	 */
	public static interface CURLMcode {
		/**
		 * please call curl_multi_perform() or<br>
		 * curl_multi_socket*() soon<br>
		 * <i>native declaration : include\curl\multi.h:61</i>
		 */
		public static final int CURLM_CALL_MULTI_PERFORM = -1;
		/** <i>native declaration : include\curl\multi.h:63</i> */
		public static final int CURLM_OK = 0;
		/**
		 * the passed-in handle is not a valid CURLM handle<br>
		 * <i>native declaration : include\curl\multi.h:64</i>
		 */
		public static final int CURLM_BAD_HANDLE = 1;
		/**
		 * an easy handle was not good/valid<br>
		 * <i>native declaration : include\curl\multi.h:65</i>
		 */
		public static final int CURLM_BAD_EASY_HANDLE = 2;
		/**
		 * if you ever get this, you're in deep sh*t<br>
		 * <i>native declaration : include\curl\multi.h:66</i>
		 */
		public static final int CURLM_OUT_OF_MEMORY = 3;
		/**
		 * this is a libcurl bug<br>
		 * <i>native declaration : include\curl\multi.h:67</i>
		 */
		public static final int CURLM_INTERNAL_ERROR = 4;
		/**
		 * the passed in socket argument did not match<br>
		 * <i>native declaration : include\curl\multi.h:68</i>
		 */
		public static final int CURLM_BAD_SOCKET = 5;
		/**
		 * curl_multi_setopt() with unsupported option<br>
		 * <i>native declaration : include\curl\multi.h:69</i>
		 */
		public static final int CURLM_UNKNOWN_OPTION = 6;
		/**
		 * an easy handle already added to a multi handle was<br>
		 * attempted to get added - again<br>
		 * <i>native declaration : include\curl\multi.h:70</i>
		 */
		public static final int CURLM_ADDED_ALREADY = 7;
		/**
		 * an api function was called from inside a<br>
		 * callback<br>
		 * <i>native declaration : include\curl\multi.h:72</i>
		 */
		public static final int CURLM_RECURSIVE_API_CALL = 8;
		/**
		 * wakeup is unavailable or failed<br>
		 * <i>native declaration : include\curl\multi.h:74</i>
		 */
		public static final int CURLM_WAKEUP_FAILURE = 9;
		/**
		 * function called with a bad parameter<br>
		 * <i>native declaration : include\curl\multi.h:75</i>
		 */
		public static final int CURLM_BAD_FUNCTION_ARGUMENT = 10;
		/** <i>native declaration : include\curl\multi.h:76</i> */
		public static final int CURLM_LAST = 11;
	};
	/**
	 * <i>native declaration : include\curl\multi.h</i><br>
	 * enum values
	 */
	public static interface CURLMSG {
		/**
		 * first, not used<br>
		 * <i>native declaration : include\curl\multi.h:90</i>
		 */
		public static final int CURLMSG_NONE = 0;
		/**
		 * This easy handle has completed. 'result' contains<br>
		 * the CURLcode of the transfer<br>
		 * <i>native declaration : include\curl\multi.h:91</i>
		 */
		public static final int CURLMSG_DONE = 1;
		/**
		 * last, not used<br>
		 * <i>native declaration : include\curl\multi.h:93</i>
		 */
		public static final int CURLMSG_LAST = 2;
	};
	/**
	 * <i>native declaration : include\curl\multi.h</i><br>
	 * enum values
	 */
	public static interface CURLMoption {
		/**
		 * This is the socket callback function pointer<br>
		 * <i>native declaration : include\curl\multi.h:348</i>
		 */
		public static final int CURLMOPT_SOCKETFUNCTION = 20000 + 1;
		/**
		 * This is the argument passed to the socket callback<br>
		 * <i>native declaration : include\curl\multi.h:351</i>
		 */
		public static final int CURLMOPT_SOCKETDATA = 10000 + 2;
		/**
		 * set to 1 to enable pipelining for this multi handle<br>
		 * <i>native declaration : include\curl\multi.h:354</i>
		 */
		public static final int CURLMOPT_PIPELINING = 0 + 3;
		/**
		 * This is the timer callback function pointer<br>
		 * <i>native declaration : include\curl\multi.h:357</i>
		 */
		public static final int CURLMOPT_TIMERFUNCTION = 20000 + 4;
		/**
		 * This is the argument passed to the timer callback<br>
		 * <i>native declaration : include\curl\multi.h:360</i>
		 */
		public static final int CURLMOPT_TIMERDATA = 10000 + 5;
		/**
		 * maximum number of entries in the connection cache<br>
		 * <i>native declaration : include\curl\multi.h:363</i>
		 */
		public static final int CURLMOPT_MAXCONNECTS = 0 + 6;
		/**
		 * maximum number of (pipelining) connections to one host<br>
		 * <i>native declaration : include\curl\multi.h:366</i>
		 */
		public static final int CURLMOPT_MAX_HOST_CONNECTIONS = 0 + 7;
		/**
		 * maximum number of requests in a pipeline<br>
		 * <i>native declaration : include\curl\multi.h:369</i>
		 */
		public static final int CURLMOPT_MAX_PIPELINE_LENGTH = 0 + 8;
		/**
		 * a connection with a content-length longer than this<br>
		 * will not be considered for pipelining<br>
		 * <i>native declaration : include\curl\multi.h:373</i>
		 */
		public static final int CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE = 30000 + 9;
		/**
		 * a connection with a chunk length longer than this<br>
		 * will not be considered for pipelining<br>
		 * <i>native declaration : include\curl\multi.h:377</i>
		 */
		public static final int CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE = 30000 + 10;
		/**
		 * a list of site names(+port) that are blacklisted from<br>
		 * pipelining<br>
		 * <i>native declaration : include\curl\multi.h:381</i>
		 */
		public static final int CURLMOPT_PIPELINING_SITE_BL = 10000 + 11;
		/**
		 * a list of server types that are blacklisted from<br>
		 * pipelining<br>
		 * <i>native declaration : include\curl\multi.h:385</i>
		 */
		public static final int CURLMOPT_PIPELINING_SERVER_BL = 10000 + 12;
		/**
		 * maximum number of open connections in total<br>
		 * <i>native declaration : include\curl\multi.h:388</i>
		 */
		public static final int CURLMOPT_MAX_TOTAL_CONNECTIONS = 0 + 13;
		/**
		 * This is the server push callback function pointer<br>
		 * <i>native declaration : include\curl\multi.h:391</i>
		 */
		public static final int CURLMOPT_PUSHFUNCTION = 20000 + 14;
		/**
		 * This is the argument passed to the server push callback<br>
		 * <i>native declaration : include\curl\multi.h:394</i>
		 */
		public static final int CURLMOPT_PUSHDATA = 10000 + 15;
		/**
		 * maximum number of concurrent streams to support on a connection<br>
		 * <i>native declaration : include\curl\multi.h:397</i>
		 */
		public static final int CURLMOPT_MAX_CONCURRENT_STREAMS = 0 + 16;
		/**
		 * the last unused<br>
		 * <i>native declaration : include\curl\multi.h:399</i>
		 */
		public static final int CURLMOPT_LASTENTRY = (0 + 16 + 1);
	};
	/**
	 * <i>native declaration : include\curl\\urlapi.h</i><br>
	 * enum values
	 */
	public static interface CURLUcode {
		/** <i>native declaration : include\curl\\urlapi.h:8</i> */
		public static final int CURLUE_OK = 0;
		/**
		 * 1<br>
		 * <i>native declaration : include\curl\\urlapi.h:9</i>
		 */
		public static final int CURLUE_BAD_HANDLE = 1;
		/**
		 * 2<br>
		 * <i>native declaration : include\curl\\urlapi.h:10</i>
		 */
		public static final int CURLUE_BAD_PARTPOINTER = 2;
		/**
		 * 3<br>
		 * <i>native declaration : include\curl\\urlapi.h:11</i>
		 */
		public static final int CURLUE_MALFORMED_INPUT = 3;
		/**
		 * 4<br>
		 * <i>native declaration : include\curl\\urlapi.h:12</i>
		 */
		public static final int CURLUE_BAD_PORT_NUMBER = 4;
		/**
		 * 5<br>
		 * <i>native declaration : include\curl\\urlapi.h:13</i>
		 */
		public static final int CURLUE_UNSUPPORTED_SCHEME = 5;
		/**
		 * 6<br>
		 * <i>native declaration : include\curl\\urlapi.h:14</i>
		 */
		public static final int CURLUE_URLDECODE = 6;
		/**
		 * 7<br>
		 * <i>native declaration : include\curl\\urlapi.h:15</i>
		 */
		public static final int CURLUE_OUT_OF_MEMORY = 7;
		/**
		 * 8<br>
		 * <i>native declaration : include\curl\\urlapi.h:16</i>
		 */
		public static final int CURLUE_USER_NOT_ALLOWED = 8;
		/**
		 * 9<br>
		 * <i>native declaration : include\curl\\urlapi.h:17</i>
		 */
		public static final int CURLUE_UNKNOWN_PART = 9;
		/**
		 * 10<br>
		 * <i>native declaration : include\curl\\urlapi.h:18</i>
		 */
		public static final int CURLUE_NO_SCHEME = 10;
		/**
		 * 11<br>
		 * <i>native declaration : include\curl\\urlapi.h:19</i>
		 */
		public static final int CURLUE_NO_USER = 11;
		/**
		 * 12<br>
		 * <i>native declaration : include\curl\\urlapi.h:20</i>
		 */
		public static final int CURLUE_NO_PASSWORD = 12;
		/**
		 * 13<br>
		 * <i>native declaration : include\curl\\urlapi.h:21</i>
		 */
		public static final int CURLUE_NO_OPTIONS = 13;
		/**
		 * 14<br>
		 * <i>native declaration : include\curl\\urlapi.h:22</i>
		 */
		public static final int CURLUE_NO_HOST = 14;
		/**
		 * 15<br>
		 * <i>native declaration : include\curl\\urlapi.h:23</i>
		 */
		public static final int CURLUE_NO_PORT = 15;
		/**
		 * 16<br>
		 * <i>native declaration : include\curl\\urlapi.h:24</i>
		 */
		public static final int CURLUE_NO_QUERY = 16;
		/**
		 * 17<br>
		 * <i>native declaration : include\curl\\urlapi.h:25</i>
		 */
		public static final int CURLUE_NO_FRAGMENT = 17;
	};
	/**
	 * <i>native declaration : include\curl\\urlapi.h</i><br>
	 * enum values
	 */
	public static interface CURLUPart {
		/** <i>native declaration : include\curl\\urlapi.h:29</i> */
		public static final int CURLUPART_URL = 0;
		/** <i>native declaration : include\curl\\urlapi.h:30</i> */
		public static final int CURLUPART_SCHEME = 1;
		/** <i>native declaration : include\curl\\urlapi.h:31</i> */
		public static final int CURLUPART_USER = 2;
		/** <i>native declaration : include\curl\\urlapi.h:32</i> */
		public static final int CURLUPART_PASSWORD = 3;
		/** <i>native declaration : include\curl\\urlapi.h:33</i> */
		public static final int CURLUPART_OPTIONS = 4;
		/** <i>native declaration : include\curl\\urlapi.h:34</i> */
		public static final int CURLUPART_HOST = 5;
		/** <i>native declaration : include\curl\\urlapi.h:35</i> */
		public static final int CURLUPART_PORT = 6;
		/** <i>native declaration : include\curl\\urlapi.h:36</i> */
		public static final int CURLUPART_PATH = 7;
		/** <i>native declaration : include\curl\\urlapi.h:37</i> */
		public static final int CURLUPART_QUERY = 8;
		/** <i>native declaration : include\curl\\urlapi.h:38</i> */
		public static final int CURLUPART_FRAGMENT = 9;
		/**
		 * added in 7.65.0<br>
		 * <i>native declaration : include\curl\\urlapi.h:39</i>
		 */
		public static final int CURLUPART_ZONEID = 10;
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_IPV6 = (int)(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPAUSE_CONT = (int)((0) | (0));
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_MQTT = (int)(1 << 28);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLOPTTYPE_FUNCTIONPOINT = (int)20000;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSH_AUTH_HOST = (int)(1 << 2);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLGSSAPI_DELEGATION_FLAG = (int)(1 << 1);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_GLOBAL_WIN32 = (int)(1 << 1);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLAUTH_DIGEST_IE = ( int)(1 << 4)  ;
	
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLHEADER_UNIFIED = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_GLOBAL_NOTHING = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPAUSE_ALL = (int)((1 << 0) | (1 << 2));
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSH_AUTH_PASSWORD = (int)(1 << 1);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_ALL = (int)(~0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_BROTLI = (int)(1 << 23);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLALTSVC_READONLYFILE = (int)(1 << 2);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSLOPT_ALLOW_BEAST = (int)(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_TELNET = (int)(1 << 6);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLOPTTYPE_SLISTPOINT = (int)10000;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_TRAILERFUNC_OK = (int)0;
	/** <i>native declaration : include\curl\curlver.h</i> */
	public static final String LIBCURL_VERSION = (String)"7.70.0";
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_HTTPPOST_CALLBACK = (int)(1 << 6);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLGSSAPI_DELEGATION_NONE = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_SMB = (int)(1 << 26);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_NTLM = (int)(1 << 4);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPAUSE_SEND = (int)(1 << 2);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_PSL = (int)(1 << 20);
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_CSELECT_OUT = (int)0x02;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLINFO_LONG = (int)0x200000;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLINFO_DOUBLE = (int)0x300000;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_FTP = (int)(1 << 2);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_RTMPTS = (int)(1 << 24);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLOPTTYPE_STRINGPOINT = (int)10000;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_RTMPTE = (int)(1 << 22);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSLOPT_NO_PARTIALCHAIN = (int)(1 << 2);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_MAX_READ_SIZE = (int)524288;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLAUTH_NTLM_WB = (int)(1 << 5);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLINFO_SOCKET = (int)0x500000;
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_WAIT_POLLOUT = (int)0x0004;
	/** <i>native declaration : include\curl\\urlapi.h</i> */
	public static final int CURLU_DEFAULT_PORT = (int)(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLAUTH_ANYSAFE = (int)(~((1 << 0) | (1 << 4)));
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_IMAPS = (int)(1 << 13);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_HTTPPOST_BUFFER = (int)(1 << 4);
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURLPIPE_HTTP1 = (int)1;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_SMTPS = (int)(1 << 17);
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_POLL_IN = (int)1;
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_CSELECT_ERR = (int)0x04;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLOPTTYPE_LONG = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_GOPHER = (int)(1 << 25);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLAUTH_NONE = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSH_AUTH_ANY = (int)(~0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_READFUNC_ABORT = (int)0x10000000;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_LDAP = (int)(1 << 7);
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_POLL_NONE = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_READFUNC_PAUSE = (int)0x10000001;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_LIBZ = (int)(1 << 3);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_GSSAPI = (int)(1 << 17);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_DICT = (int)(1 << 9);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_TLSAUTH_SRP = (int)(1 << 14);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLINFO_TYPEMASK = (int)0xf00000;
	/** <i>native declaration : include\curl\\urlapi.h</i> */
	public static final int CURLU_DEFAULT_SCHEME = (int)(1 << 2);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_SOCKOPT_ALREADY_CONNECTED = (int)2;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSLOPT_NO_REVOKE = (int)(1 << 1);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLFINFOFLAG_KNOWN_FILETYPE = (int)(1 << 1);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_HET_DEFAULT = (int)200;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_LARGEFILE = (int)(1 << 9);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLFINFOFLAG_KNOWN_UID = (int)(1 << 4);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final NativeLong CURLAUTH_NEGOTIATE =  new NativeLong((long)(1 << 2));
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_GLOBAL_ALL = (int)((1 << 0) | (1 << 1));
	/** <i>native declaration : include\curl\system.h</i> */
	public static final String CURL_FORMAT_CURL_OFF_TU = (String)"lu";
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_FNMATCHFUNC_FAIL = (int)2;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_REDIR_POST_ALL = (int)(1 | 2 | 4);
	/** <i>native declaration : include\curl\\urlapi.h</i> */
	public static final int CURLU_PATH_AS_IS = (int)(1 << 4);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final NativeSize CURL_ZERO_TERMINATED = new NativeSize(-1);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSH_AUTH_GSSAPI = (int)(1 << 5);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSH_AUTH_NONE = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_HTTPPOST_PTRNAME = (int)(1 << 2);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_REDIR_POST_301 = (int)1;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_REDIR_POST_302 = (int)2;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPAUSE_SEND_CONT = (int)(0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_REDIR_POST_303 = (int)4;
	/** <i>native declaration : include\curl\curlver.h</i> */
	public static final int LIBCURL_VERSION_PATCH = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_FNMATCHFUNC_MATCH = (int)0;
	/** <i>native declaration : include\curl\\urlapi.h</i> */
	public static final int CURLU_GUESS_SCHEME = (int)(1 << 9);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSH_AUTH_PUBLICKEY = (int)(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_DEBUG = (int)(1 << 6);
	/** <i>native declaration : include\curl\\urlapi.h</i> */
	public static final int CURLU_NON_SUPPORT_SCHEME = (int)(1 << 3);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_CHUNK_END_FUNC_OK = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_HTTPPOST_PTRCONTENTS = (int)(1 << 3);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_FILE = (int)(1 << 10);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_RTMP = (int)(1 << 19);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final NativeLong CURLAUTH_BASIC = new NativeLong(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_IPRESOLVE_V6 = (int)2;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_SSPI = (int)(1 << 11);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_IPRESOLVE_V4 = (int)1;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_HTTPPOST_LARGE = (int)(1 << 7);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_HTTPS = (int)(1 << 1);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_CHUNK_BGN_FUNC_OK = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_WRITEFUNC_PAUSE = (int)0x10000001;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLGSSAPI_DELEGATION_POLICY_FLAG = (int)(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPAUSE_RECV = (int)(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_MULTI_SSL = (int)(1 << 22);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_POP3S = (int)(1 << 15);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_NTLM_WB = (int)(1 << 15);
	/** <i>native declaration : include\curl\\urlapi.h</i> */
	public static final int CURLU_URLDECODE = (int)(1 << 6);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLALTSVC_H1 = (int)(1 << 3);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLALTSVC_H2 = (int)(1 << 4);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_FTPS = (int)(1 << 3);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLALTSVC_H3 = (int)(1 << 5);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_RTMPE = (int)(1 << 21);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_KERBEROS4 = (int)(1 << 1);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_POP3 = (int)(1 << 14);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSH_AUTH_AGENT = (int)(1 << 4);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_SSL = (int)(1 << 2);
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_POLL_REMOVE = (int)4;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_RTSP = (int)(1 << 18);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final NativeLong CURLAUTH_NTLM = new NativeLong(1 << 3);
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURLPIPE_NOTHING = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_MAX_WRITE_SIZE = (int)16384;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_CHUNK_BGN_FUNC_FAIL = (int)1;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_SMBS = (int)(1 << 27);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_SFTP = (int)(1 << 5);
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_PUSH_DENY = (int)1;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLFINFOFLAG_KNOWN_HLINKCOUNT = (int)(1 << 7);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final NativeLong CURLAUTH_DIGEST = new NativeLong(1 << 1);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final NativeLong CURLAUTH_GSSAPI = new NativeLong(1 << 2);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLFINFOFLAG_KNOWN_FILENAME = (int)(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_GLOBAL_SSL = (int)(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_IPRESOLVE_WHATEVER = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_RTMPS = (int)(1 << 23);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_RTMPT = (int)(1 << 20);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_KERBEROS5 = (int)(1 << 18);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_GLOBAL_DEFAULT = (int)((1 << 0) | (1 << 1));
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_FNMATCHFUNC_NOMATCH = (int)1;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_ERROR_SIZE = (int)256;
	/** <i>native declaration : include\curl\\urlapi.h</i> */
	public static final int CURLU_NO_DEFAULT_PORT = (int)(1 << 1);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLFINFOFLAG_KNOWN_PERM = (int)(1 << 3);
	/** <i>native declaration : include\curl\\urlapi.h</i> */
	public static final int CURLU_NO_AUTHORITY = (int)(1 << 10);
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_POLL_OUT = (int)2;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_SEEKFUNC_CANTSEEK = (int)2;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLFINFOFLAG_KNOWN_GID = (int)(1 << 5);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLINFO_SLIST = (int)0x400000;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_UPKEEP_INTERVAL_DEFAULT = (int)60000;
	/** <i>native declaration : include\curl\\urlapi.h</i> */
	public static final int CURLU_URLENCODE = (int)(1 << 7);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSLOPT_REVOKE_BEST_EFFORT = (int)(1 << 3);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_HTTPPOST_READFILE = (int)(1 << 1);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_HTTPPOST_FILENAME = (int)(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_ASYNCHDNS = (int)(1 << 7);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_MAX_HTTP_HEADER = (int)(100 * 1024);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLHEADER_SEPARATE = (int)(1 << 0);
	/** <i>native declaration : include\curl\curlver.h</i> */
	public static final int LIBCURL_VERSION_NUM = (int)0x074600;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLFINFOFLAG_KNOWN_TIME = (int)(1 << 2);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_GLOBAL_ACK_EINTR = (int)(1 << 2);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_REDIR_GET_ALL = (int)0;
	/** <i>native declaration : include\curl\\urlapi.h</i> */
	public static final int CURLU_APPENDQUERY = (int)(1 << 8);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_CURLDEBUG = (int)(1 << 13);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLINFO_PTR = (int)0x400000;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_CHUNK_BGN_FUNC_SKIP = (int)2;
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_POLL_INOUT = (int)3;
	/** <i>native declaration : include\curl\curlver.h</i> */
	public static final int LIBCURL_VERSION_MAJOR = (int)7;
	/** <i>native declaration : include\curl\curlver.h</i> */
	public static final int LIBCURL_VERSION_MINOR = (int)70;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final NativeLong CURLAUTH_ONLY = new NativeLong(1 << 31);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLINFO_STRING = (int)0x100000;
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_WAIT_POLLIN = (int)0x0001;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final NativeLong CURLAUTH_GSSNEGOTIATE = new NativeLong(1 << 2);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_SEEKFUNC_OK = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_HTTP3 = (int)(1 << 25);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_HTTP2 = (int)(1 << 16);
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_PUSH_OK = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLE_ALREADY_COMPLETE = (int)99999;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLALTSVC_IMMEDIATELY = (int)(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPAUSE_RECV_CONT = (int)(0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_TRAILERFUNC_ABORT = (int)1;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_LDAPS = (int)(1 << 8);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_ALTSVC = (int)(1 << 24);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_HTTPS_PROXY = (int)(1 << 21);
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURLPIPE_MULTIPLEX = (int)2;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_SCP = (int)(1 << 4);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_HTTP = (int)(1 << 0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLOPTTYPE_OFF_T = (int)30000;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_SOCKOPT_ERROR = (int)1;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLINFO_MASK = (int)0x0fffff;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_IDN = (int)(1 << 10);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLFINFOFLAG_KNOWN_SIZE = (int)(1 << 6);
	/** <i>native declaration : include\curl\system.h</i> */
	public static final String CURL_FORMAT_CURL_OFF_T = (String)"ld";
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final NativeLong CURLAUTH_ANY = new NativeLong(~(1 << 4));
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_TFTP = (int)(1 << 11);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_HTTPPOST_PTRBUFFER = (int)(1 << 5);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_SPNEGO = (int)(1 << 8);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_PROGRESSFUNC_CONTINUE = (int)0x10000001;
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_WAIT_POLLPRI = (int)0x0002;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_CHUNK_END_FUNC_FAIL = (int)1;
	/** <i>native declaration : include\curl\\urlapi.h</i> */
	public static final int CURLU_DISALLOW_USER = (int)(1 << 5);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final NativeLong CURLAUTH_BEARER = new NativeLong(1 << 6);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSH_AUTH_KEYBOARD = (int)(1 << 3);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLOPTTYPE_OBJECTPOINT = (int)10000;
	/** <i>native declaration : include\curl\curlver.h</i> */
	public static final String LIBCURL_TIMESTAMP = (String)"2020-04-29";
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLINFO_OFF_T = (int)0x600000;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_SMTP = (int)(1 << 16);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_SOCKOPT_OK = (int)0;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_CONV = (int)(1 << 12);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_UNIX_SOCKETS = (int)(1 << 19);
	/** <i>native declaration : include\curl\multi.h</i> */
	public static final int CURL_CSELECT_IN = (int)0x01;
	/** <i>native declaration : include\curl\curlver.h</i> */
	public static final String LIBCURL_COPYRIGHT = (String)"1996 - 2020 Daniel Stenberg, <daniel@haxx.se>.";
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_SEEKFUNC_FAIL = (int)1;
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLPROTO_IMAP = (int)(1 << 12);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURL_VERSION_GSSNEGOTIATE = (int)(1 << 5);
	/** <i>native declaration : include\curl\curl.h</i> */
	public static final int CURLSSH_AUTH_DEFAULT = (int)(~0);
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_progress_callback extends Callback {
		int apply(Pointer clientp, double dltotal, double dlnow, double ultotal, double ulnow);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_xferinfo_callback extends Callback {
		int apply(Pointer clientp, NativeLong dltotal, NativeLong dlnow, NativeLong ultotal, NativeLong ulnow);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_write_callback extends Callback {
		NativeSize apply(Pointer buffer, NativeSize size, NativeSize nitems, Pointer outstream);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_resolver_start_callback extends Callback {
		int apply(Pointer resolver_state, Pointer reserved, Pointer userdata);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_chunk_bgn_callback extends Callback {
		NativeLong apply(Pointer transfer_info, Pointer ptr, int remains);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_chunk_end_callback extends Callback {
		NativeLong apply(Pointer ptr);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_fnmatch_callback extends Callback {
		int apply(Pointer ptr, Pointer pattern, Pointer string);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_seek_callback extends Callback {
		int apply(Pointer instream, NativeLong offset, int origin);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_read_callback extends Callback {
		NativeSize apply(Pointer buffer, NativeSize size, NativeSize nitems, Pointer instream);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_trailer_callback extends Callback {
		int apply(PointerByReference list, Pointer userdata);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_sockopt_callback extends Callback {
		int apply(Pointer clientp, Pointer curlfd, int purpose);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_opensocket_callback extends Callback {
		Libcurl4Library.curl_socket_t apply(Pointer clientp, int purpose, curl_sockaddr address);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_closesocket_callback extends Callback {
		int apply(Pointer clientp, Pointer item);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_ioctl_callback extends Callback {
		int apply(Libcurl4Library.CURL handle, int cmd, Pointer clientp);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_malloc_callback extends Callback {
		Pointer apply(NativeSize size);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_free_callback extends Callback {
		void apply(Pointer ptr);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_realloc_callback extends Callback {
		Pointer apply(Pointer ptr, NativeSize size);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_strdup_callback extends Callback {
		Pointer apply(Pointer str);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_calloc_callback extends Callback {
		Pointer apply(NativeSize nmemb, NativeSize size);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_debug_callback extends Callback {
		/**
		 * @param handle the handle/transfer this concerns<br>
		 * @param type what kind of data<br>
		 * @param data points to the data<br>
		 * @param size size of the data pointed to
		 */
		int apply(Libcurl4Library.CURL handle, int type, Pointer data, NativeSize size, Pointer userptr);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_conv_callback extends Callback {
		int apply(Pointer buffer, NativeSize length);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_ssl_ctx_callback extends Callback {
		/**
		 * @param curl easy handle<br>
		 * @param ssl_ctx actually an OpenSSL<br>or WolfSSL SSL_CTX,<br>or an mbedTLS<br>mbedtls_ssl_config
		 */
		int apply(Libcurl4Library.CURL curl, Pointer ssl_ctx, Pointer userptr);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_sshkeycallback extends Callback {
		/**
		 * @param easy easy handle<br>
		 * @param knownkey known<br>
		 * @param foundkey found<br>
		 * @param arg1 libcurl's view on the keys
		 */
		int apply(Libcurl4Library.CURL easy, curl_khkey knownkey, curl_khkey foundkey, int arg1, Pointer clientp);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_formget_callback extends Callback {
		NativeSize apply(Pointer arg, Pointer buf, NativeSize len);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_lock_function extends Callback {
		void apply(Libcurl4Library.CURL handle, int data, int locktype, Pointer userptr);
	};
	/** <i>native declaration : include\curl\curl.h</i> */
	public interface curl_unlock_function extends Callback {
		void apply(Libcurl4Library.CURL handle, int data, Pointer userptr);
	};
	/** <i>native declaration : include\curl\multi.h</i> */
	public interface curl_socket_callback extends Callback {
		/**
		 * @param easy easy handle<br>
		 * @param s socket<br>
		 * @param what see above<br>
		 * @param userp private callback<br>pointer
		 */
		int apply(Libcurl4Library.CURL easy, Pointer s, int what, Pointer userp, Pointer socketp);
	};
	/** <i>native declaration : include\curl\multi.h</i> */
	public interface curl_multi_timer_callback extends Callback {
		/**
		 * @param multi multi handle<br>
		 * @param timeout_ms see above
		 */
		int apply(Libcurl4Library.CURLM multi, NativeLong timeout_ms, Pointer userp);
	};
	/** <i>native declaration : include\curl\multi.h</i> */
	public interface curl_push_callback extends Callback {
		int apply(Libcurl4Library.CURL parent, Libcurl4Library.CURL easy, NativeSize num_headers, Libcurl4Library.curl_pushheaders headers, Pointer userp);
	};
	/**
	 * curl_strequal() and curl_strnequal() are subject for removal in a future<br>
	 * release<br>
	 * Original signature : <code>int curl_strequal(const char*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2037</i><br>
	 * @deprecated use the safer methods {@link #curl_strequal(java.lang.String, java.lang.String)} and {@link #curl_strequal(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int curl_strequal(Pointer s1, Pointer s2);
	/**
	 * curl_strequal() and curl_strnequal() are subject for removal in a future<br>
	 * release<br>
	 * Original signature : <code>int curl_strequal(const char*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2037</i>
	 */
	int curl_strequal(String s1, String s2);
	/**
	 * Original signature : <code>int curl_strnequal(const char*, const char*, size_t)</code><br>
	 * <i>native declaration : include\curl\curl.h:2038</i><br>
	 * @deprecated use the safer methods {@link #curl_strnequal(java.lang.String, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #curl_strnequal(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int curl_strnequal(Pointer s1, Pointer s2, NativeSize n);
	/**
	 * Original signature : <code>int curl_strnequal(const char*, const char*, size_t)</code><br>
	 * <i>native declaration : include\curl\curl.h:2038</i>
	 */
	int curl_strnequal(String s1, String s2, NativeSize n);
	/**
	 * NAME curl_mime_init()<br>
	 * * DESCRIPTION<br>
	 * * Create a mime context and return its handle. The easy parameter is the<br>
	 * target handle.<br>
	 * Original signature : <code>curl_mime* curl_mime_init(CURL*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2052</i>
	 */
	PointerByReference curl_mime_init(Libcurl4Library.CURL easy);
	/**
	 * NAME curl_mime_free()<br>
	 * * DESCRIPTION<br>
	 * * release a mime handle and its substructures.<br>
	 * Original signature : <code>void curl_mime_free(curl_mime*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2061</i><br>
	 * @deprecated use the safer method {@link #curl_mime_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void curl_mime_free(Pointer mime);
	/**
	 * NAME curl_mime_free()<br>
	 * * DESCRIPTION<br>
	 * * release a mime handle and its substructures.<br>
	 * Original signature : <code>void curl_mime_free(curl_mime*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2061</i>
	 */
	void curl_mime_free(PointerByReference mime);
	/**
	 * NAME curl_mime_addpart()<br>
	 * * DESCRIPTION<br>
	 * * Append a new empty part to the given mime context and return a handle to<br>
	 * the created part.<br>
	 * Original signature : <code>curl_mimepart* curl_mime_addpart(curl_mime*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2071</i><br>
	 * @deprecated use the safer method {@link #curl_mime_addpart(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	PointerByReference curl_mime_addpart(Pointer mime);
	/**
	 * NAME curl_mime_addpart()<br>
	 * * DESCRIPTION<br>
	 * * Append a new empty part to the given mime context and return a handle to<br>
	 * the created part.<br>
	 * Original signature : <code>curl_mimepart* curl_mime_addpart(curl_mime*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2071</i>
	 */
	PointerByReference curl_mime_addpart(PointerByReference mime);
	/**
	 * NAME curl_mime_name()<br>
	 * * DESCRIPTION<br>
	 * * Set mime/form part name.<br>
	 * Original signature : <code>CURLcode curl_mime_name(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2080</i><br>
	 * @deprecated use the safer methods {@link #curl_mime_name(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #curl_mime_name(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int curl_mime_name(Pointer part, Pointer name);
	/**
	 * NAME curl_mime_name()<br>
	 * * DESCRIPTION<br>
	 * * Set mime/form part name.<br>
	 * Original signature : <code>CURLcode curl_mime_name(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2080</i>
	 */
	int curl_mime_name(PointerByReference part, String name);
	/**
	 * NAME curl_mime_name()<br>
	 * * DESCRIPTION<br>
	 * * Set mime/form part name.<br>
	 * Original signature : <code>CURLcode curl_mime_name(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2080</i>
	 */
	int curl_mime_name(PointerByReference part, Pointer name);
	/**
	 * NAME curl_mime_filename()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part remote file name.<br>
	 * Original signature : <code>CURLcode curl_mime_filename(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2089</i><br>
	 * @deprecated use the safer methods {@link #curl_mime_filename(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #curl_mime_filename(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int curl_mime_filename(Pointer part, Pointer filename);
	/**
	 * NAME curl_mime_filename()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part remote file name.<br>
	 * Original signature : <code>CURLcode curl_mime_filename(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2089</i>
	 */
	int curl_mime_filename(PointerByReference part, String filename);
	/**
	 * NAME curl_mime_filename()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part remote file name.<br>
	 * Original signature : <code>CURLcode curl_mime_filename(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2089</i>
	 */
	int curl_mime_filename(PointerByReference part, Pointer filename);
	/**
	 * NAME curl_mime_type()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part type.<br>
	 * Original signature : <code>CURLcode curl_mime_type(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2099</i><br>
	 * @deprecated use the safer methods {@link #curl_mime_type(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #curl_mime_type(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int curl_mime_type(Pointer part, Pointer mimetype);
	/**
	 * NAME curl_mime_type()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part type.<br>
	 * Original signature : <code>CURLcode curl_mime_type(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2099</i>
	 */
	int curl_mime_type(PointerByReference part, String mimetype);
	/**
	 * NAME curl_mime_type()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part type.<br>
	 * Original signature : <code>CURLcode curl_mime_type(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2099</i>
	 */
	int curl_mime_type(PointerByReference part, Pointer mimetype);
	/**
	 * NAME curl_mime_encoder()<br>
	 * * DESCRIPTION<br>
	 * * Set mime data transfer encoder.<br>
	 * Original signature : <code>CURLcode curl_mime_encoder(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2108</i><br>
	 * @deprecated use the safer methods {@link #curl_mime_encoder(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #curl_mime_encoder(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int curl_mime_encoder(Pointer part, Pointer encoding);
	/**
	 * NAME curl_mime_encoder()<br>
	 * * DESCRIPTION<br>
	 * * Set mime data transfer encoder.<br>
	 * Original signature : <code>CURLcode curl_mime_encoder(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2108</i>
	 */
	int curl_mime_encoder(PointerByReference part, String encoding);
	/**
	 * NAME curl_mime_encoder()<br>
	 * * DESCRIPTION<br>
	 * * Set mime data transfer encoder.<br>
	 * Original signature : <code>CURLcode curl_mime_encoder(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2108</i>
	 */
	int curl_mime_encoder(PointerByReference part, Pointer encoding);
	/**
	 * NAME curl_mime_data()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part data source from memory data,<br>
	 * Original signature : <code>CURLcode curl_mime_data(curl_mimepart*, const char*, size_t)</code><br>
	 * <i>native declaration : include\curl\curl.h:2118</i><br>
	 * @deprecated use the safer methods {@link #curl_mime_data(com.sun.jna.ptr.PointerByReference, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #curl_mime_data(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int curl_mime_data(Pointer part, Pointer data, NativeSize datasize);
	/**
	 * NAME curl_mime_data()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part data source from memory data,<br>
	 * Original signature : <code>CURLcode curl_mime_data(curl_mimepart*, const char*, size_t)</code><br>
	 * <i>native declaration : include\curl\curl.h:2118</i>
	 */
	int curl_mime_data(PointerByReference part, String data, NativeSize datasize);
	/**
	 * NAME curl_mime_data()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part data source from memory data,<br>
	 * Original signature : <code>CURLcode curl_mime_data(curl_mimepart*, const char*, size_t)</code><br>
	 * <i>native declaration : include\curl\curl.h:2118</i>
	 */
	int curl_mime_data(PointerByReference part, Pointer data, NativeSize datasize);
	/**
	 * NAME curl_mime_filedata()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part data source from named file.<br>
	 * Original signature : <code>CURLcode curl_mime_filedata(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2128</i><br>
	 * @deprecated use the safer methods {@link #curl_mime_filedata(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #curl_mime_filedata(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int curl_mime_filedata(Pointer part, Pointer filename);
	/**
	 * NAME curl_mime_filedata()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part data source from named file.<br>
	 * Original signature : <code>CURLcode curl_mime_filedata(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2128</i>
	 */
	int curl_mime_filedata(PointerByReference part, String filename);
	/**
	 * NAME curl_mime_filedata()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part data source from named file.<br>
	 * Original signature : <code>CURLcode curl_mime_filedata(curl_mimepart*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2128</i>
	 */
	int curl_mime_filedata(PointerByReference part, Pointer filename);
	/**
	 * NAME curl_mime_data_cb()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part data source from callback function.<br>
	 * Original signature : <code>CURLcode curl_mime_data_cb(curl_mimepart*, curl_off_t, curl_read_callback, curl_seek_callback, curl_free_callback, void*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2138</i><br>
	 * @deprecated use the safer method {@link #curl_mime_data_cb(com.sun.jna.ptr.PointerByReference, com.sun.jna.NativeLong, com.example.jna.Libcurl4Library.curl_read_callback, com.example.jna.Libcurl4Library.curl_seek_callback, com.example.jna.Libcurl4Library.curl_free_callback, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int curl_mime_data_cb(Pointer part, NativeLong datasize, Libcurl4Library.curl_read_callback readfunc, Libcurl4Library.curl_seek_callback seekfunc, Libcurl4Library.curl_free_callback freefunc, Pointer arg);
	/**
	 * NAME curl_mime_data_cb()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part data source from callback function.<br>
	 * Original signature : <code>CURLcode curl_mime_data_cb(curl_mimepart*, curl_off_t, curl_read_callback, curl_seek_callback, curl_free_callback, void*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2138</i>
	 */
	int curl_mime_data_cb(PointerByReference part, NativeLong datasize, Libcurl4Library.curl_read_callback readfunc, Libcurl4Library.curl_seek_callback seekfunc, Libcurl4Library.curl_free_callback freefunc, Pointer arg);
	/**
	 * NAME curl_mime_subparts()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part data source from subparts.<br>
	 * Original signature : <code>CURLcode curl_mime_subparts(curl_mimepart*, curl_mime*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2152</i><br>
	 * @deprecated use the safer method {@link #curl_mime_subparts(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int curl_mime_subparts(Pointer part, Pointer subparts);
	/**
	 * NAME curl_mime_subparts()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part data source from subparts.<br>
	 * Original signature : <code>CURLcode curl_mime_subparts(curl_mimepart*, curl_mime*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2152</i>
	 */
	int curl_mime_subparts(PointerByReference part, PointerByReference subparts);
	/**
	 * NAME curl_mime_headers()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part headers.<br>
	 * Original signature : <code>CURLcode curl_mime_headers(curl_mimepart*, curl_slist*, int)</code><br>
	 * <i>native declaration : include\curl\curl.h:2161</i><br>
	 * @deprecated use the safer method {@link #curl_mime_headers(com.sun.jna.ptr.PointerByReference, com.example.jna.curl_slist, int)} instead
	 */
	@Deprecated 
	int curl_mime_headers(Pointer part, curl_slist headers, int take_ownership);
	/**
	 * NAME curl_mime_headers()<br>
	 * * DESCRIPTION<br>
	 * * Set mime part headers.<br>
	 * Original signature : <code>CURLcode curl_mime_headers(curl_mimepart*, curl_slist*, int)</code><br>
	 * <i>native declaration : include\curl\curl.h:2161</i>
	 */
	int curl_mime_headers(PointerByReference part, curl_slist headers, int take_ownership);
	/**
	 * NAME curl_formadd()<br>
	 * * DESCRIPTION<br>
	 * * Pretty advanced function for building multi-part formposts. Each invoke<br>
	 * adds one part that together construct a full post. Then use<br>
	 * CURLOPT_HTTPPOST to send it off to libcurl.<br>
	 * Original signature : <code>CURLFORMcode curl_formadd(curl_httppost**, curl_httppost**, null)</code><br>
	 * <i>native declaration : include\curl\curl.h:2239</i><br>
	 * @deprecated use the safer method {@link #curl_formadd(com.example.jna.curl_httppost.ByReference[], com.example.jna.curl_httppost.ByReference[], java.lang.Object)} instead
	 */
	@Deprecated 
	int curl_formadd(PointerByReference httppost, PointerByReference last_post, Object... varargs);
	/**
	 * NAME curl_formadd()<br>
	 * * DESCRIPTION<br>
	 * * Pretty advanced function for building multi-part formposts. Each invoke<br>
	 * adds one part that together construct a full post. Then use<br>
	 * CURLOPT_HTTPPOST to send it off to libcurl.<br>
	 * Original signature : <code>CURLFORMcode curl_formadd(curl_httppost**, curl_httppost**, null)</code><br>
	 * <i>native declaration : include\curl\curl.h:2239</i>
	 */
	int curl_formadd(curl_httppost.ByReference httppost[], curl_httppost.ByReference last_post[], Object... varargs);
	/**
	 * NAME curl_formget()<br>
	 * * DESCRIPTION<br>
	 * * Serialize a curl_httppost struct built with curl_formadd().<br>
	 * Accepts a void pointer as second argument which will be passed to<br>
	 * the curl_formget_callback function.<br>
	 * Returns 0 on success.<br>
	 * Original signature : <code>int curl_formget(curl_httppost*, void*, curl_formget_callback)</code><br>
	 * <i>native declaration : include\curl\curl.h:2264</i>
	 */
	int curl_formget(curl_httppost form, Pointer arg, Libcurl4Library.curl_formget_callback append);
	/**
	 * NAME curl_formfree()<br>
	 * * DESCRIPTION<br>
	 * * Free a multipart formpost previously built with curl_formadd().<br>
	 * Original signature : <code>void curl_formfree(curl_httppost*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2273</i>
	 */
	void curl_formfree(curl_httppost form);
	/**
	 * NAME curl_getenv()<br>
	 * * DESCRIPTION<br>
	 * * Returns a malloc()'ed string that MUST be curl_free()ed after usage is<br>
	 * complete. DEPRECATED - see lib/README.curlx<br>
	 * Original signature : <code>char* curl_getenv(const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2283</i><br>
	 * @deprecated use the safer methods {@link #curl_getenv(java.lang.String)} and {@link #curl_getenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer curl_getenv(Pointer variable);
	/**
	 * NAME curl_getenv()<br>
	 * * DESCRIPTION<br>
	 * * Returns a malloc()'ed string that MUST be curl_free()ed after usage is<br>
	 * complete. DEPRECATED - see lib/README.curlx<br>
	 * Original signature : <code>char* curl_getenv(const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2283</i>
	 */
	Pointer curl_getenv(String variable);
	/**
	 * NAME curl_version()<br>
	 * * DESCRIPTION<br>
	 * * Returns a static ascii string of the libcurl version.<br>
	 * Original signature : <code>char* curl_version()</code><br>
	 * <i>native declaration : include\curl\curl.h:2292</i>
	 */
	Pointer curl_version();
	/**
	 * NAME curl_easy_escape()<br>
	 * * DESCRIPTION<br>
	 * * Escapes URL strings (converts all letters consider illegal in URLs to their<br>
	 * %XX versions). This function returns a new allocated string or NULL if an<br>
	 * error occurred.<br>
	 * Original signature : <code>char* curl_easy_escape(CURL*, const char*, int)</code><br>
	 * <i>native declaration : include\curl\curl.h:2303</i><br>
	 * @deprecated use the safer methods {@link #curl_easy_escape(com.example.jna.Libcurl4Library.CURL, java.lang.String, int)} and {@link #curl_easy_escape(com.example.jna.Libcurl4Library.CURL, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	Pointer curl_easy_escape(Libcurl4Library.CURL handle, Pointer string, int length);
	/**
	 * NAME curl_easy_escape()<br>
	 * * DESCRIPTION<br>
	 * * Escapes URL strings (converts all letters consider illegal in URLs to their<br>
	 * %XX versions). This function returns a new allocated string or NULL if an<br>
	 * error occurred.<br>
	 * Original signature : <code>char* curl_easy_escape(CURL*, const char*, int)</code><br>
	 * <i>native declaration : include\curl\curl.h:2303</i>
	 */
	Pointer curl_easy_escape(Libcurl4Library.CURL handle, String string, int length);
	/**
	 * the previous version:<br>
	 * Original signature : <code>char* curl_escape(const char*, int)</code><br>
	 * <i>native declaration : include\curl\curl.h:2308</i><br>
	 * @deprecated use the safer methods {@link #curl_escape(java.lang.String, int)} and {@link #curl_escape(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	Pointer curl_escape(Pointer string, int length);
	/**
	 * the previous version:<br>
	 * Original signature : <code>char* curl_escape(const char*, int)</code><br>
	 * <i>native declaration : include\curl\curl.h:2308</i>
	 */
	Pointer curl_escape(String string, int length);
	/**
	 * NAME curl_easy_unescape()<br>
	 * * DESCRIPTION<br>
	 * * Unescapes URL encoding in strings (converts all %XX codes to their 8bit<br>
	 * versions). This function returns a new allocated string or NULL if an error<br>
	 * occurred.<br>
	 * Conversion Note: On non-ASCII platforms the ASCII %XX codes are<br>
	 * converted into the host encoding.<br>
	 * Original signature : <code>char* curl_easy_unescape(CURL*, const char*, int, int*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2323</i><br>
	 * @deprecated use the safer methods {@link #curl_easy_unescape(com.example.jna.Libcurl4Library.CURL, java.lang.String, int, java.nio.IntBuffer)} and {@link #curl_easy_unescape(com.example.jna.Libcurl4Library.CURL, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer curl_easy_unescape(Libcurl4Library.CURL handle, Pointer string, int length, IntByReference outlength);
	/**
	 * NAME curl_easy_unescape()<br>
	 * * DESCRIPTION<br>
	 * * Unescapes URL encoding in strings (converts all %XX codes to their 8bit<br>
	 * versions). This function returns a new allocated string or NULL if an error<br>
	 * occurred.<br>
	 * Conversion Note: On non-ASCII platforms the ASCII %XX codes are<br>
	 * converted into the host encoding.<br>
	 * Original signature : <code>char* curl_easy_unescape(CURL*, const char*, int, int*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2323</i>
	 */
	Pointer curl_easy_unescape(Libcurl4Library.CURL handle, String string, int length, IntBuffer outlength);
	/**
	 * the previous version<br>
	 * Original signature : <code>char* curl_unescape(const char*, int)</code><br>
	 * <i>native declaration : include\curl\curl.h:2329</i><br>
	 * @deprecated use the safer methods {@link #curl_unescape(java.lang.String, int)} and {@link #curl_unescape(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	Pointer curl_unescape(Pointer string, int length);
	/**
	 * the previous version<br>
	 * Original signature : <code>char* curl_unescape(const char*, int)</code><br>
	 * <i>native declaration : include\curl\curl.h:2329</i>
	 */
	Pointer curl_unescape(String string, int length);
	/**
	 * NAME curl_free()<br>
	 * * DESCRIPTION<br>
	 * * Provided for de-allocation in the same translation unit that did the<br>
	 * allocation. Added in libcurl 7.10<br>
	 * Original signature : <code>void curl_free(void*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2340</i>
	 */
	void curl_free(Pointer p);
	/**
	 * NAME curl_global_init()<br>
	 * * DESCRIPTION<br>
	 * * curl_global_init() should be invoked exactly once for each application that<br>
	 * uses libcurl and before any call of other libcurl functions.<br>
	 * * This function is not thread-safe!<br>
	 * Original signature : <code>CURLcode curl_global_init(long)</code><br>
	 * <i>native declaration : include\curl\curl.h:2352</i>
	 */
	int curl_global_init(NativeLong flags);
	/**
	 * NAME curl_global_init_mem()<br>
	 * * DESCRIPTION<br>
	 * * curl_global_init() or curl_global_init_mem() should be invoked exactly once<br>
	 * for each application that uses libcurl.  This function can be used to<br>
	 * initialize libcurl and set user defined memory management callback<br>
	 * functions.  Users can implement memory management routines to check for<br>
	 * memory leaks, check for mis-use of the curl library etc.  User registered<br>
	 * callback routines will be invoked by this library instead of the system<br>
	 * memory management routines like malloc, free etc.<br>
	 * Original signature : <code>CURLcode curl_global_init_mem(long, curl_malloc_callback, curl_free_callback, curl_realloc_callback, curl_strdup_callback, curl_calloc_callback)</code><br>
	 * <i>native declaration : include\curl\curl.h:2367</i>
	 */
	int curl_global_init_mem(NativeLong flags, Libcurl4Library.curl_malloc_callback m, Libcurl4Library.curl_free_callback f, Libcurl4Library.curl_realloc_callback r, Libcurl4Library.curl_strdup_callback s, Libcurl4Library.curl_calloc_callback c);
	/**
	 * NAME curl_global_cleanup()<br>
	 * * DESCRIPTION<br>
	 * * curl_global_cleanup() should be invoked exactly once for each application<br>
	 * that uses libcurl<br>
	 * Original signature : <code>void curl_global_cleanup()</code><br>
	 * <i>native declaration : include\curl\curl.h:2382</i>
	 */
	void curl_global_cleanup();
	/**
	 * Original signature : <code>CURLsslset curl_global_sslset(curl_sslbackend, const char*, const curl_ssl_backend***)</code><br>
	 * <i>native declaration : include\curl\curl.h:2428</i><br>
	 * @deprecated use the safer methods {@link #curl_global_sslset(int, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #curl_global_sslset(int, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int curl_global_sslset(int id, Pointer name, PointerByReference avail);
	/**
	 * Original signature : <code>CURLsslset curl_global_sslset(curl_sslbackend, const char*, const curl_ssl_backend***)</code><br>
	 * <i>native declaration : include\curl\curl.h:2428</i>
	 */
	int curl_global_sslset(int id, String name, PointerByReference avail);
	/**
	 * NAME curl_slist_append()<br>
	 * * DESCRIPTION<br>
	 * * Appends a string to a linked list. If no list exists, it will be created<br>
	 * first. Returns the new list, after appending.<br>
	 * Original signature : <code>curl_slist* curl_slist_append(curl_slist*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2439</i><br>
	 * @deprecated use the safer methods {@link #curl_slist_append(com.example.jna.curl_slist, java.lang.String)} and {@link #curl_slist_append(com.example.jna.curl_slist, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	curl_slist curl_slist_append(curl_slist curl_slistPtr1, Pointer charPtr1);
	/**
	 * NAME curl_slist_append()<br>
	 * * DESCRIPTION<br>
	 * * Appends a string to a linked list. If no list exists, it will be created<br>
	 * first. Returns the new list, after appending.<br>
	 * Original signature : <code>curl_slist* curl_slist_append(curl_slist*, const char*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2439</i>
	 */
	curl_slist curl_slist_append(curl_slist curl_slistPtr1, String charPtr1);
	/**
	 * NAME curl_slist_free_all()<br>
	 * * DESCRIPTION<br>
	 * * free a previously built curl_slist.<br>
	 * Original signature : <code>void curl_slist_free_all(curl_slist*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2449</i>
	 */
	void curl_slist_free_all(curl_slist curl_slistPtr1);
	/**
	 * NAME curl_getdate()<br>
	 * * DESCRIPTION<br>
	 * * Returns the time, in seconds since 1 Jan 1970 of the time string given in<br>
	 * the first argument. The time argument in the second parameter is unused<br>
	 * and should be set to NULL.<br>
	 * Original signature : <code>time_t curl_getdate(const char*, const time_t*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2460</i><br>
	 * @deprecated use the safer methods {@link #curl_getdate(java.lang.String, com.example.jna.Libcurl4Library.time_t[])} and {@link #curl_getdate(com.sun.jna.Pointer, com.example.jna.Libcurl4Library.time_t)} instead
	 */
	@Deprecated 
	Libcurl4Library.time_t curl_getdate(Pointer p, Libcurl4Library.time_t unused);
	/**
	 * NAME curl_getdate()<br>
	 * * DESCRIPTION<br>
	 * * Returns the time, in seconds since 1 Jan 1970 of the time string given in<br>
	 * the first argument. The time argument in the second parameter is unused<br>
	 * and should be set to NULL.<br>
	 * Original signature : <code>time_t curl_getdate(const char*, const time_t*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2460</i>
	 */
	Libcurl4Library.time_t curl_getdate(String p, Libcurl4Library.time_t unused[]);
	/**
	 * Original signature : <code>CURLSH* curl_share_init()</code><br>
	 * <i>native declaration : include\curl\curl.h:2645</i>
	 */
	Pointer curl_share_init();
	/**
	 * Original signature : <code>CURLSHcode curl_share_setopt(CURLSH*, CURLSHoption, null)</code><br>
	 * <i>native declaration : include\curl\curl.h:2646</i>
	 */
	int curl_share_setopt(Libcurl4Library.CURLSH CURLSHPtr1, int option, Object... varargs);
	/**
	 * Original signature : <code>CURLSHcode curl_share_cleanup(CURLSH*)</code><br>
	 * <i>native declaration : include\curl\curl.h:2647</i>
	 */
	int curl_share_cleanup(Libcurl4Library.CURLSH CURLSHPtr1);
	/**
	 * NAME curl_version_info()<br>
	 * * DESCRIPTION<br>
	 * * This function returns a pointer to a static copy of the version info<br>
	 * struct. See above.<br>
	 * Original signature : <code>curl_version_info_data* curl_version_info(CURLversion)</code><br>
	 * <i>native declaration : include\curl\curl.h:2752</i>
	 */
	curl_version_info_data curl_version_info(int CURLversion1);
	/**
	 * NAME curl_easy_strerror()<br>
	 * * DESCRIPTION<br>
	 * * The curl_easy_strerror function may be used to turn a CURLcode value<br>
	 * into the equivalent human readable error string.  This is useful<br>
	 * for printing meaningful error messages.<br>
	 * Original signature : <code>char* curl_easy_strerror(CURLcode)</code><br>
	 * <i>native declaration : include\curl\curl.h:2763</i>
	 */
	Pointer curl_easy_strerror(int CURLcode1);
	/**
	 * NAME curl_share_strerror()<br>
	 * * DESCRIPTION<br>
	 * * The curl_share_strerror function may be used to turn a CURLSHcode value<br>
	 * into the equivalent human readable error string.  This is useful<br>
	 * for printing meaningful error messages.<br>
	 * Original signature : <code>char* curl_share_strerror(CURLSHcode)</code><br>
	 * <i>native declaration : include\curl\curl.h:2774</i>
	 */
	Pointer curl_share_strerror(int CURLSHcode1);
	/**
	 * NAME curl_easy_pause()<br>
	 * * DESCRIPTION<br>
	 * * The curl_easy_pause function pauses or unpauses transfers. Select the new<br>
	 * state by setting the bitmask, use the convenience defines below.<br>
	 * Original signature : <code>CURLcode curl_easy_pause(CURL*, int)</code><br>
	 * <i>native declaration : include\curl\curl.h:2785</i>
	 */
	int curl_easy_pause(Libcurl4Library.CURL handle, int bitmask);
	/**
	 * Original signature : <code>CURL* curl_easy_init()</code><br>
	 * <i>native declaration : include\curl\easy.h:28</i>
	 */
	Pointer curl_easy_init();
	/**
	 * Original signature : <code>CURLcode curl_easy_setopt(CURL*, CURLoption, null)</code><br>
	 * <i>native declaration : include\curl\easy.h:29</i>
	 */
	int curl_easy_setopt(Libcurl4Library.CURL curl, int option, Object... varargs);
	/**
	 * Original signature : <code>CURLcode curl_easy_perform(CURL*)</code><br>
	 * <i>native declaration : include\curl\easy.h:30</i>
	 */
	int curl_easy_perform(Libcurl4Library.CURL curl);
	/**
	 * Original signature : <code>void curl_easy_cleanup(CURL*)</code><br>
	 * <i>native declaration : include\curl\easy.h:31</i>
	 */
	void curl_easy_cleanup(Libcurl4Library.CURL curl);
	/**
	 * NAME curl_easy_getinfo()<br>
	 * * DESCRIPTION<br>
	 * * Request internal information from the curl session with this function.  The<br>
	 * third argument MUST be a pointer to a long, a pointer to a char * or a<br>
	 * pointer to a double (as the documentation describes elsewhere).  The data<br>
	 * pointed to will be filled in accordingly and can be relied upon only if the<br>
	 * function returns CURLE_OK.  This function is intended to get used *AFTER* a<br>
	 * performed transfer, all results from this function are undefined until the<br>
	 * transfer is completed.<br>
	 * Original signature : <code>CURLcode curl_easy_getinfo(CURL*, CURLINFO, null)</code><br>
	 * <i>native declaration : include\curl\easy.h:46</i>
	 */
	int curl_easy_getinfo(Libcurl4Library.CURL curl, int info, Object... varargs);
	/**
	 * NAME curl_easy_duphandle()<br>
	 * * DESCRIPTION<br>
	 * * Creates a new curl session handle with the same options set for the handle<br>
	 * passed in. Duplicating a handle could only be a matter of cloning data and<br>
	 * options, internal state info and things like persistent connections cannot<br>
	 * be transferred. It is useful in multithreaded applications when you can run<br>
	 * curl_easy_duphandle() for each new thread to avoid a series of identical<br>
	 * curl_easy_setopt() invokes in every thread.<br>
	 * Original signature : <code>CURL* curl_easy_duphandle(CURL*)</code><br>
	 * <i>native declaration : include\curl\easy.h:61</i>
	 */
	Pointer curl_easy_duphandle(Libcurl4Library.CURL curl);
	/**
	 * NAME curl_easy_reset()<br>
	 * * DESCRIPTION<br>
	 * * Re-initializes a CURL handle to the default values. This puts back the<br>
	 * handle to the same state as it was in when it was just created.<br>
	 * * It does keep: live connections, the Session ID cache, the DNS cache and the<br>
	 * cookies.<br>
	 * Original signature : <code>void curl_easy_reset(CURL*)</code><br>
	 * <i>native declaration : include\curl\easy.h:74</i>
	 */
	void curl_easy_reset(Libcurl4Library.CURL curl);
	/**
	 * NAME curl_easy_recv()<br>
	 * * DESCRIPTION<br>
	 * * Receives data from the connected socket. Use after successful<br>
	 * curl_easy_perform() with CURLOPT_CONNECT_ONLY option.<br>
	 * Original signature : <code>CURLcode curl_easy_recv(CURL*, void*, size_t, size_t*)</code><br>
	 * <i>native declaration : include\curl\easy.h:84</i>
	 */
	int curl_easy_recv(Libcurl4Library.CURL curl, Pointer buffer, NativeSize buflen, NativeSizeByReference n);
	/**
	 * NAME curl_easy_send()<br>
	 * * DESCRIPTION<br>
	 * * Sends data over the connected socket. Use after successful<br>
	 * curl_easy_perform() with CURLOPT_CONNECT_ONLY option.<br>
	 * Original signature : <code>CURLcode curl_easy_send(CURL*, const void*, size_t, size_t*)</code><br>
	 * <i>native declaration : include\curl\easy.h:95</i>
	 */
	int curl_easy_send(Libcurl4Library.CURL curl, Pointer buffer, NativeSize buflen, NativeSizeByReference n);
	/**
	 * NAME curl_easy_upkeep()<br>
	 * * DESCRIPTION<br>
	 * * Performs connection upkeep for the given session handle.<br>
	 * Original signature : <code>CURLcode curl_easy_upkeep(CURL*)</code><br>
	 * <i>native declaration : include\curl\easy.h:106</i>
	 */
	int curl_easy_upkeep(Libcurl4Library.CURL curl);
	/**
	 * Name:    curl_multi_init()<br>
	 * * Desc:    inititalize multi-style curl usage<br>
	 * * Returns: a new CURLM handle to use in all 'curl_multi' functions.<br>
	 * Original signature : <code>CURLM* curl_multi_init()</code><br>
	 * <i>native declaration : include\curl\multi.h:126</i>
	 */
	Pointer curl_multi_init();
	/**
	 * Name:    curl_multi_add_handle()<br>
	 * * Desc:    add a standard curl handle to the multi stack<br>
	 * * Returns: CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_add_handle(CURLM*, CURL*)</code><br>
	 * <i>native declaration : include\curl\multi.h:135</i>
	 */
	int curl_multi_add_handle(Libcurl4Library.CURLM multi_handle, Libcurl4Library.CURL curl_handle);
	/**
	 * Name:    curl_multi_remove_handle()<br>
	 * * Desc:    removes a curl handle from the multi stack again<br>
	 * * Returns: CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_remove_handle(CURLM*, CURL*)</code><br>
	 * <i>native declaration : include\curl\multi.h:145</i>
	 */
	int curl_multi_remove_handle(Libcurl4Library.CURLM multi_handle, Libcurl4Library.CURL curl_handle);
	/**
	 * Name:    curl_multi_fdset()<br>
	 * * Desc:    Ask curl for its fd_set sets. The app can use these to select() or<br>
	 *          poll() on. We want curl_multi_perform() called as soon as one of<br>
	 *          them are ready.<br>
	 * * Returns: CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_fdset(CURLM*, fd_set*, fd_set*, fd_set*, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:157</i><br>
	 * @deprecated use the safer methods {@link #curl_multi_fdset(com.example.jna.Libcurl4Library.CURLM, com.example.jna.Libcurl4Library.fd_set, com.example.jna.Libcurl4Library.fd_set, com.example.jna.Libcurl4Library.fd_set, java.nio.IntBuffer)} and {@link #curl_multi_fdset(com.example.jna.Libcurl4Library.CURLM, com.example.jna.Libcurl4Library.fd_set, com.example.jna.Libcurl4Library.fd_set, com.example.jna.Libcurl4Library.fd_set, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int curl_multi_fdset(Libcurl4Library.CURLM multi_handle, Libcurl4Library.fd_set read_fd_set, Libcurl4Library.fd_set write_fd_set, Libcurl4Library.fd_set exc_fd_set, IntByReference max_fd);
	/**
	 * Name:    curl_multi_fdset()<br>
	 * * Desc:    Ask curl for its fd_set sets. The app can use these to select() or<br>
	 *          poll() on. We want curl_multi_perform() called as soon as one of<br>
	 *          them are ready.<br>
	 * * Returns: CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_fdset(CURLM*, fd_set*, fd_set*, fd_set*, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:157</i>
	 */
	int curl_multi_fdset(Libcurl4Library.CURLM multi_handle, Libcurl4Library.fd_set read_fd_set, Libcurl4Library.fd_set write_fd_set, Libcurl4Library.fd_set exc_fd_set, IntBuffer max_fd);
	/**
	 * Name:     curl_multi_wait()<br>
	 * * Desc:     Poll on all fds within a CURLM set as well as any<br>
	 *           additional fds passed to the function.<br>
	 * * Returns:  CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_wait(CURLM*, curl_waitfd[], unsigned int, int, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:171</i><br>
	 * @deprecated use the safer methods {@link #curl_multi_wait(com.example.jna.Libcurl4Library.CURLM, com.example.jna.curl_waitfd[], int, int, java.nio.IntBuffer)} and {@link #curl_multi_wait(com.example.jna.Libcurl4Library.CURLM, com.example.jna.curl_waitfd[], int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int curl_multi_wait(Libcurl4Library.CURLM multi_handle, Pointer extra_fds, int extra_nfds, int timeout_ms, IntByReference ret);
	/**
	 * Name:     curl_multi_wait()<br>
	 * * Desc:     Poll on all fds within a CURLM set as well as any<br>
	 *           additional fds passed to the function.<br>
	 * * Returns:  CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_wait(CURLM*, curl_waitfd[], unsigned int, int, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:171</i>
	 */
	int curl_multi_wait(Libcurl4Library.CURLM multi_handle, curl_waitfd extra_fds[], int extra_nfds, int timeout_ms, IntBuffer ret);
	/**
	 * Name:     curl_multi_wait()<br>
	 * * Desc:     Poll on all fds within a CURLM set as well as any<br>
	 *           additional fds passed to the function.<br>
	 * * Returns:  CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_wait(CURLM*, curl_waitfd[], unsigned int, int, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:171</i>
	 */
	int curl_multi_wait(Libcurl4Library.CURLM multi_handle, curl_waitfd extra_fds[], int extra_nfds, int timeout_ms, IntByReference ret);
	/**
	 * Name:     curl_multi_poll()<br>
	 * * Desc:     Poll on all fds within a CURLM set as well as any<br>
	 *           additional fds passed to the function.<br>
	 * * Returns:  CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_poll(CURLM*, curl_waitfd[], unsigned int, int, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:185</i><br>
	 * @deprecated use the safer methods {@link #curl_multi_poll(com.example.jna.Libcurl4Library.CURLM, com.example.jna.curl_waitfd[], int, int, java.nio.IntBuffer)} and {@link #curl_multi_poll(com.example.jna.Libcurl4Library.CURLM, com.example.jna.curl_waitfd[], int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int curl_multi_poll(Libcurl4Library.CURLM multi_handle, Pointer extra_fds, int extra_nfds, int timeout_ms, IntByReference ret);
	/**
	 * Name:     curl_multi_poll()<br>
	 * * Desc:     Poll on all fds within a CURLM set as well as any<br>
	 *           additional fds passed to the function.<br>
	 * * Returns:  CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_poll(CURLM*, curl_waitfd[], unsigned int, int, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:185</i>
	 */
	int curl_multi_poll(Libcurl4Library.CURLM multi_handle, curl_waitfd extra_fds[], int extra_nfds, int timeout_ms, IntBuffer ret);
	/**
	 * Name:     curl_multi_poll()<br>
	 * * Desc:     Poll on all fds within a CURLM set as well as any<br>
	 *           additional fds passed to the function.<br>
	 * * Returns:  CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_poll(CURLM*, curl_waitfd[], unsigned int, int, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:185</i>
	 */
	int curl_multi_poll(Libcurl4Library.CURLM multi_handle, curl_waitfd extra_fds[], int extra_nfds, int timeout_ms, IntByReference ret);
	/**
	 * Name:     curl_multi_wakeup()<br>
	 * * Desc:     wakes up a sleeping curl_multi_poll call.<br>
	 * * Returns:  CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_wakeup(CURLM*)</code><br>
	 * <i>native declaration : include\curl\multi.h:198</i>
	 */
	int curl_multi_wakeup(Libcurl4Library.CURLM multi_handle);
	/**
	 * Name:    curl_multi_perform()<br>
	 * * Desc:    When the app thinks there's data available for curl it calls this<br>
	 *          function to read/write whatever there is right now. This returns<br>
	 *          as soon as the reads and writes are done. This function does not<br>
	 *          require that there actually is data available for reading or that<br>
	 *          data can be written, it can be called just in case. It returns<br>
	 *          the number of handles that still transfer data in the second<br>
	 *          argument's integer-pointer.<br>
	 * * Returns: CURLMcode type, general multi error code. *NOTE* that this only<br>
	 *          returns errors etc regarding the whole multi stack. There might<br>
	 *          still have occurred problems on individual transfers even when<br>
	 *          this returns OK.<br>
	 * Original signature : <code>CURLMcode curl_multi_perform(CURLM*, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:216</i><br>
	 * @deprecated use the safer methods {@link #curl_multi_perform(com.example.jna.Libcurl4Library.CURLM, java.nio.IntBuffer)} and {@link #curl_multi_perform(com.example.jna.Libcurl4Library.CURLM, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int curl_multi_perform(Libcurl4Library.CURLM multi_handle, IntByReference running_handles);
	/**
	 * Name:    curl_multi_perform()<br>
	 * * Desc:    When the app thinks there's data available for curl it calls this<br>
	 *          function to read/write whatever there is right now. This returns<br>
	 *          as soon as the reads and writes are done. This function does not<br>
	 *          require that there actually is data available for reading or that<br>
	 *          data can be written, it can be called just in case. It returns<br>
	 *          the number of handles that still transfer data in the second<br>
	 *          argument's integer-pointer.<br>
	 * * Returns: CURLMcode type, general multi error code. *NOTE* that this only<br>
	 *          returns errors etc regarding the whole multi stack. There might<br>
	 *          still have occurred problems on individual transfers even when<br>
	 *          this returns OK.<br>
	 * Original signature : <code>CURLMcode curl_multi_perform(CURLM*, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:216</i>
	 */
	int curl_multi_perform(Libcurl4Library.CURLM multi_handle, IntBuffer running_handles);
	/**
	 * Name:    curl_multi_cleanup()<br>
	 * * Desc:    Cleans up and removes a whole multi stack. It does not free or<br>
	 *          touch any individual easy handles in any way. We need to define<br>
	 *          in what state those handles will be if this function is called<br>
	 *          in the middle of a transfer.<br>
	 * * Returns: CURLMcode type, general multi error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_cleanup(CURLM*)</code><br>
	 * <i>native declaration : include\curl\multi.h:229</i>
	 */
	int curl_multi_cleanup(Libcurl4Library.CURLM multi_handle);
	/**
	 * Name:    curl_multi_info_read()<br>
	 * * Desc:    Ask the multi handle if there's any messages/informationals from<br>
	 *          the individual transfers. Messages include informationals such as<br>
	 *          error code from the transfer or just the fact that a transfer is<br>
	 *          completed. More details on these should be written down as well.<br>
	 * *          Repeated calls to this function will return a new struct each<br>
	 *          time, until a special "end of msgs" struct is returned as a signal<br>
	 *          that there is no more to get at this point.<br>
	 * *          The data the returned pointer points to will not survive calling<br>
	 *          curl_multi_cleanup().<br>
	 * *          The 'CURLMsg' struct is meant to be very simple and only contain<br>
	 *          very basic information. If more involved information is wanted,<br>
	 *          we will provide the particular "transfer handle" in that struct<br>
	 *          and that should/could/would be used in subsequent<br>
	 *          curl_easy_getinfo() calls (or similar). The point being that we<br>
	 *          must never expose complex structs to applications, as then we'll<br>
	 *          undoubtably get backwards compatibility problems in the future.<br>
	 * * Returns: A pointer to a filled-in struct, or NULL if it failed or ran out<br>
	 *          of structs. It also writes the number of messages left in the<br>
	 *          queue (after this read) in the integer the second argument points<br>
	 *          to.<br>
	 * Original signature : <code>CURLMsg* curl_multi_info_read(CURLM*, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:259</i><br>
	 * @deprecated use the safer methods {@link #curl_multi_info_read(com.example.jna.Libcurl4Library.CURLM, java.nio.IntBuffer)} and {@link #curl_multi_info_read(com.example.jna.Libcurl4Library.CURLM, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	CURLMsg curl_multi_info_read(Libcurl4Library.CURLM multi_handle, IntByReference msgs_in_queue);
	/**
	 * Name:    curl_multi_info_read()<br>
	 * * Desc:    Ask the multi handle if there's any messages/informationals from<br>
	 *          the individual transfers. Messages include informationals such as<br>
	 *          error code from the transfer or just the fact that a transfer is<br>
	 *          completed. More details on these should be written down as well.<br>
	 * *          Repeated calls to this function will return a new struct each<br>
	 *          time, until a special "end of msgs" struct is returned as a signal<br>
	 *          that there is no more to get at this point.<br>
	 * *          The data the returned pointer points to will not survive calling<br>
	 *          curl_multi_cleanup().<br>
	 * *          The 'CURLMsg' struct is meant to be very simple and only contain<br>
	 *          very basic information. If more involved information is wanted,<br>
	 *          we will provide the particular "transfer handle" in that struct<br>
	 *          and that should/could/would be used in subsequent<br>
	 *          curl_easy_getinfo() calls (or similar). The point being that we<br>
	 *          must never expose complex structs to applications, as then we'll<br>
	 *          undoubtably get backwards compatibility problems in the future.<br>
	 * * Returns: A pointer to a filled-in struct, or NULL if it failed or ran out<br>
	 *          of structs. It also writes the number of messages left in the<br>
	 *          queue (after this read) in the integer the second argument points<br>
	 *          to.<br>
	 * Original signature : <code>CURLMsg* curl_multi_info_read(CURLM*, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:259</i>
	 */
	CURLMsg curl_multi_info_read(Libcurl4Library.CURLM multi_handle, IntBuffer msgs_in_queue);
	/**
	 * Name:    curl_multi_strerror()<br>
	 * * Desc:    The curl_multi_strerror function may be used to turn a CURLMcode<br>
	 *          value into the equivalent human readable error string.  This is<br>
	 *          useful for printing meaningful error messages.<br>
	 * * Returns: A pointer to a zero-terminated error message.<br>
	 * Original signature : <code>char* curl_multi_strerror(CURLMcode)</code><br>
	 * <i>native declaration : include\curl\multi.h:271</i>
	 */
	Pointer curl_multi_strerror(int CURLMcode1);
	/**
	 * Original signature : <code>CURLMcode curl_multi_socket(CURLM*, curl_socket_t, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:316</i><br>
	 * @deprecated use the safer methods {@link #curl_multi_socket(com.example.jna.Libcurl4Library.CURLM, com.example.jna.Libcurl4Library.curl_socket_t, java.nio.IntBuffer)} and {@link #curl_multi_socket(com.example.jna.Libcurl4Library.CURLM, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int curl_multi_socket(Libcurl4Library.CURLM multi_handle, Pointer s, IntByReference running_handles);
	/**
	 * Original signature : <code>CURLMcode curl_multi_socket(CURLM*, curl_socket_t, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:316</i>
	 */
	int curl_multi_socket(Libcurl4Library.CURLM multi_handle, Libcurl4Library.curl_socket_t s, IntBuffer running_handles);
	/**
	 * Original signature : <code>CURLMcode curl_multi_socket_action(CURLM*, curl_socket_t, int, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:319</i><br>
	 * @deprecated use the safer methods {@link #curl_multi_socket_action(com.example.jna.Libcurl4Library.CURLM, com.example.jna.Libcurl4Library.curl_socket_t, int, java.nio.IntBuffer)} and {@link #curl_multi_socket_action(com.example.jna.Libcurl4Library.CURLM, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int curl_multi_socket_action(Libcurl4Library.CURLM multi_handle, Pointer s, int ev_bitmask, IntByReference running_handles);
	/**
	 * Original signature : <code>CURLMcode curl_multi_socket_action(CURLM*, curl_socket_t, int, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:319</i>
	 */
	int curl_multi_socket_action(Libcurl4Library.CURLM multi_handle, Libcurl4Library.curl_socket_t s, int ev_bitmask, IntBuffer running_handles);
	/**
	 * Original signature : <code>CURLMcode curl_multi_socket_all(CURLM*, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:324</i><br>
	 * @deprecated use the safer methods {@link #curl_multi_socket_all(com.example.jna.Libcurl4Library.CURLM, java.nio.IntBuffer)} and {@link #curl_multi_socket_all(com.example.jna.Libcurl4Library.CURLM, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int curl_multi_socket_all(Libcurl4Library.CURLM multi_handle, IntByReference running_handles);
	/**
	 * Original signature : <code>CURLMcode curl_multi_socket_all(CURLM*, int*)</code><br>
	 * <i>native declaration : include\curl\multi.h:324</i>
	 */
	int curl_multi_socket_all(Libcurl4Library.CURLM multi_handle, IntBuffer running_handles);
	/**
	 * Name:    curl_multi_timeout()<br>
	 * * Desc:    Returns the maximum number of milliseconds the app is allowed to<br>
	 *          wait before curl_multi_socket() or curl_multi_perform() must be<br>
	 *          called (to allow libcurl's timed events to take place).<br>
	 * * Returns: CURLM error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_timeout(CURLM*, long*)</code><br>
	 * <i>native declaration : include\curl\multi.h:343</i>
	 */
	int curl_multi_timeout(Libcurl4Library.CURLM multi_handle, NativeLongByReference milliseconds);
	/**
	 * Name:    curl_multi_setopt()<br>
	 * * Desc:    Sets options for the multi handle.<br>
	 * * Returns: CURLM error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_setopt(CURLM*, CURLMoption, null)</code><br>
	 * <i>native declaration : include\curl\multi.h:410</i>
	 */
	int curl_multi_setopt(Libcurl4Library.CURLM multi_handle, int option, Object... varargs);
	/**
	 * Name:    curl_multi_assign()<br>
	 * * Desc:    This function sets an association in the multi handle between the<br>
	 *          given socket and a private pointer of the application. This is<br>
	 *          (only) useful for curl_multi_socket uses.<br>
	 * * Returns: CURLM error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_assign(CURLM*, curl_socket_t, void*)</code><br>
	 * <i>native declaration : include\curl\multi.h:423</i><br>
	 * @deprecated use the safer methods {@link #curl_multi_assign(com.example.jna.Libcurl4Library.CURLM, com.example.jna.Libcurl4Library.curl_socket_t, com.sun.jna.Pointer)} and {@link #curl_multi_assign(com.example.jna.Libcurl4Library.CURLM, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int curl_multi_assign(Libcurl4Library.CURLM multi_handle, Pointer sockfd, Pointer sockp);
	/**
	 * Name:    curl_multi_assign()<br>
	 * * Desc:    This function sets an association in the multi handle between the<br>
	 *          given socket and a private pointer of the application. This is<br>
	 *          (only) useful for curl_multi_socket uses.<br>
	 * * Returns: CURLM error code.<br>
	 * Original signature : <code>CURLMcode curl_multi_assign(CURLM*, curl_socket_t, void*)</code><br>
	 * <i>native declaration : include\curl\multi.h:423</i>
	 */
	int curl_multi_assign(Libcurl4Library.CURLM multi_handle, Libcurl4Library.curl_socket_t sockfd, Pointer sockp);
	/**
	 * Original signature : <code>char* curl_pushheader_bynum(curl_pushheaders*, size_t)</code><br>
	 * <i>native declaration : include\curl\multi.h:440</i>
	 */
	Pointer curl_pushheader_bynum(Libcurl4Library.curl_pushheaders h, NativeSize num);
	/**
	 * Original signature : <code>char* curl_pushheader_byname(curl_pushheaders*, const char*)</code><br>
	 * <i>native declaration : include\curl\multi.h:442</i><br>
	 * @deprecated use the safer methods {@link #curl_pushheader_byname(com.example.jna.Libcurl4Library.curl_pushheaders, java.lang.String)} and {@link #curl_pushheader_byname(com.example.jna.Libcurl4Library.curl_pushheaders, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer curl_pushheader_byname(Libcurl4Library.curl_pushheaders h, Pointer name);
	/**
	 * Original signature : <code>char* curl_pushheader_byname(curl_pushheaders*, const char*)</code><br>
	 * <i>native declaration : include\curl\multi.h:442</i>
	 */
	Pointer curl_pushheader_byname(Libcurl4Library.curl_pushheaders h, String name);
	/**
	 * curl_url() creates a new CURLU handle and returns a pointer to it.<br>
	 * Must be freed with curl_url_cleanup().<br>
	 * Original signature : <code>CURLU* curl_url()</code><br>
	 * <i>native declaration : include\curl\\urlapi.h:60</i>
	 */
	PointerByReference curl_url();
	/**
	 * curl_url_cleanup() frees the CURLU handle and related resources used for<br>
	 * the URL parsing. It will not free strings previously returned with the URL<br>
	 * API.<br>
	 * Original signature : <code>void curl_url_cleanup(CURLU*)</code><br>
	 * <i>native declaration : include\curl\\urlapi.h:67</i><br>
	 * @deprecated use the safer method {@link #curl_url_cleanup(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void curl_url_cleanup(Pointer handle);
	/**
	 * curl_url_cleanup() frees the CURLU handle and related resources used for<br>
	 * the URL parsing. It will not free strings previously returned with the URL<br>
	 * API.<br>
	 * Original signature : <code>void curl_url_cleanup(CURLU*)</code><br>
	 * <i>native declaration : include\curl\\urlapi.h:67</i>
	 */
	void curl_url_cleanup(PointerByReference handle);
	/**
	 * curl_url_dup() duplicates a CURLU handle and returns a new copy. The new<br>
	 * handle must also be freed with curl_url_cleanup().<br>
	 * Original signature : <code>CURLU* curl_url_dup(CURLU*)</code><br>
	 * <i>native declaration : include\curl\\urlapi.h:73</i><br>
	 * @deprecated use the safer method {@link #curl_url_dup(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	PointerByReference curl_url_dup(Pointer in);
	/**
	 * curl_url_dup() duplicates a CURLU handle and returns a new copy. The new<br>
	 * handle must also be freed with curl_url_cleanup().<br>
	 * Original signature : <code>CURLU* curl_url_dup(CURLU*)</code><br>
	 * <i>native declaration : include\curl\\urlapi.h:73</i>
	 */
	PointerByReference curl_url_dup(PointerByReference in);
	/**
	 * curl_url_get() extracts a specific part of the URL from a CURLU<br>
	 * handle. Returns error code. The returned pointer MUST be freed with<br>
	 * curl_free() afterwards.<br>
	 * Original signature : <code>CURLUcode curl_url_get(CURLU*, CURLUPart, char**, unsigned int)</code><br>
	 * <i>native declaration : include\curl\\urlapi.h:80</i><br>
	 * @deprecated use the safer method {@link #curl_url_get(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int curl_url_get(Pointer handle, int what, PointerByReference part, int flags);
	/**
	 * curl_url_get() extracts a specific part of the URL from a CURLU<br>
	 * handle. Returns error code. The returned pointer MUST be freed with<br>
	 * curl_free() afterwards.<br>
	 * Original signature : <code>CURLUcode curl_url_get(CURLU*, CURLUPart, char**, unsigned int)</code><br>
	 * <i>native declaration : include\curl\\urlapi.h:80</i>
	 */
	int curl_url_get(PointerByReference handle, int what, PointerByReference part, int flags);
	/**
	 * curl_url_set() sets a specific part of the URL in a CURLU handle. Returns<br>
	 * error code. The passed in string will be copied. Passing a NULL instead of<br>
	 * a part string, clears that part.<br>
	 * Original signature : <code>CURLUcode curl_url_set(CURLU*, CURLUPart, const char*, unsigned int)</code><br>
	 * <i>native declaration : include\curl\\urlapi.h:88</i><br>
	 * @deprecated use the safer methods {@link #curl_url_set(com.sun.jna.ptr.PointerByReference, int, java.lang.String, int)} and {@link #curl_url_set(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int curl_url_set(Pointer handle, int what, Pointer part, int flags);
	/**
	 * curl_url_set() sets a specific part of the URL in a CURLU handle. Returns<br>
	 * error code. The passed in string will be copied. Passing a NULL instead of<br>
	 * a part string, clears that part.<br>
	 * Original signature : <code>CURLUcode curl_url_set(CURLU*, CURLUPart, const char*, unsigned int)</code><br>
	 * <i>native declaration : include\curl\\urlapi.h:88</i>
	 */
	int curl_url_set(PointerByReference handle, int what, String part, int flags);
	/**
	 * curl_url_set() sets a specific part of the URL in a CURLU handle. Returns<br>
	 * error code. The passed in string will be copied. Passing a NULL instead of<br>
	 * a part string, clears that part.<br>
	 * Original signature : <code>CURLUcode curl_url_set(CURLU*, CURLUPart, const char*, unsigned int)</code><br>
	 * <i>native declaration : include\curl\\urlapi.h:88</i>
	 */
	int curl_url_set(PointerByReference handle, int what, Pointer part, int flags);
	public static class CURLU extends PointerType {
		public CURLU(Pointer address) {
			super(address);
		}
		public CURLU() {
			super();
		}
	};
	public static class CURL extends PointerType {
		public CURL(Pointer address) {
			super(address);
		}
		public CURL() {
			super();
		}
	};
	public static class curl_mime extends PointerType {
		public curl_mime(Pointer address) {
			super(address);
		}
		public curl_mime() {
			super();
		}
	};
	public static class sockaddr extends PointerType {
		public sockaddr(Pointer address) {
			super(address);
		}
		public sockaddr() {
			super();
		}
	};
	public static class curl_socket_t extends PointerType {
		public curl_socket_t(Pointer address) {
			super(address);
		}
		public curl_socket_t() {
			super();
		}
	};
	public static class CURLM extends PointerType {
		public CURLM(Pointer address) {
			super(address);
		}
		public CURLM() {
			super();
		}
	};
	public static class CURLSH extends PointerType {
		public CURLSH(Pointer address) {
			super(address);
		}
		public CURLSH() {
			super();
		}
	};
	public static class curl_pushheaders extends PointerType {
		public curl_pushheaders(Pointer address) {
			super(address);
		}
		public curl_pushheaders() {
			super();
		}
	};
	public static class curl_mimepart extends PointerType {
		public curl_mimepart(Pointer address) {
			super(address);
		}
		public curl_mimepart() {
			super();
		}
	};
	public static class fd_set extends PointerType {
		public fd_set(Pointer address) {
			super(address);
		}
		public fd_set() {
			super();
		}
	};
	public static class time_t extends PointerType {
		public time_t(Pointer address) {
			super(address);
		}
		public time_t() {
			super();
		}
	};
}
